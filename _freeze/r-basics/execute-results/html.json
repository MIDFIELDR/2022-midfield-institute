{
  "hash": "cb90e51ce1ef1bd64f02455e99ecb367",
  "result": {
    "markdown": "---\ntitle: \"R basics\"\n---\n\n\n\n\nThis guide is adapted and edited from [@Bashir+Eddelbuettel:2018] licensed under [CC BY SA](https://creativecommons.org/licenses/by-sa/2.0/legalcode) by [ilustat](https://ilustat.com/post/writing-real-life-motivated-r-guides/).\n\n## Preface\n\nThis \"Getting Started\" guide will give you a flavor of what R can do for you. To get the most out of this guide, do the examples and exercises as you read along.\n\n[Experiment safely.]{.important} Be brave and experiment with commands and options as it is an essential part of the learning process. Things can and will go \"wrong\", like getting error messages or deleting things that you create. You can recover from most situations using \"undo\" `ctrl Z` (MacOS `cmd Z`) or restarting R with the RStudio menu *Session \\> Restart R*.\n\n[Before starting.]{.important} Our tutorials assume that you\n\n-   Have completed the [Before you arrive](before-you-arrive.html) instructions\\\n-   Start your R session by launching the RStudio project you created, e.g., `midfield-institute-2022.Rproj`\n\n## Introduction\n\n[Starting R & RStudio.]{.important} R starts automatically when you open RStudio with a screen similar to @fig-tinyverse-01. The console starts with information about the version number, license and contributors. The last line is a prompt (`>`) that indicates R is ready to do something.\n\n\n::: {.cell .fig-cap-location-margin}\n::: {.cell-output-display}\n![RStudio screenshot with Console on the left and Help tab in the bottom right](figures/tinyverse-01.png){#fig-tinyverse-01 width=818}\n:::\n:::\n\n\n[Quitting R & RStudio]{.important}. When you quit RStudio you will be asked whether to *Save workspace?* with a yes or no option. If you choose *Yes*, your current workspace is restored the next time you open RStudio. But as long as you save your script, saving the workspace is unnecessary. We recommend you choose *No*.\n\nTo set *No* as the default option, from the RStudio menu select *Tools \\> Global Options*.\n\n-   Un-check the box *Restore .RData into workspace at startup*\n-   Set *Save workspace to .RData on exit:* to \"Never\"\n\n\n::: {.cell .fig-cap-location-margin}\n::: {.cell-output-display}\n![RStudio global options default settings.](figures/rstudio-never-workspace.png){#fig-tinyverse-02 width=605}\n:::\n:::\n\n\n## R help\n\nR's built-in help system is an essential part of finding solutions to your R programming problems.\n\n[help() function]{.important}. From the R Console you can use the `help()` function or `?`. For example, try the following two commands (which give the same result):\n\n``` r\n# view the function help page\nhelp(mean)\n? mean\n```\n\n[Keyword search.]{.important} To do a keyword search use the function `apropos()` with the keyword in double quotes (\"keyword\") or single quote ('keyword'). For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# keyword search \napropos(\"mean\")\n#>  [1] \".colMeans\"     \".rowMeans\"     \"colMeans\"      \"kmeans\"       \n#>  [5] \"mean\"          \"mean.Date\"     \"mean.default\"  \"mean.difftime\"\n#>  [9] \"mean.POSIXct\"  \"mean.POSIXlt\"  \"rowMeans\"      \"weighted.mean\"\n```\n:::\n\n\n[Help examples.]{.important} Use the `example()` function to run the examples at the end of the help for a function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# run the examples at the end of the help page\nexample(mean)\n#> \n#> mean> x <- c(0:10, 50)\n#> \n#> mean> xm <- mean(x)\n#> \n#> mean> c(xm, mean(x, trim = 0.10))\n#> [1] 8.75 5.50\n```\n:::\n\n\n[RStudio help.]{.important} Rstudio provides search box in the *Help* tab to make your life easier (see @fig-tinyverse-01).\n\n[Online help.]{.important} When you search online use \\[R\\] in your search terms, for example, \"\\[r\\] linear regression\".\n\nThere is nearly always more than one solution to your problem---investigate the different options and try to use one whose arguments and logic you can follow.\n\n::: panel-tabset\n## Your turn\n\nTry the following.\n\n1.  `help(median)`\n2.  `? sd`\n3.  `? max`\n\n## Answer\n\nThe following help pages should appear in the RStudio *Help* pane.\n\n![](figures/r-basics-ans-01.png)\n\n![](figures/r-basics-ans-02.png)\n\n![](figures/r-basics-ans-03.png)\n:::\n\n[Warning.]{.important} If an R command is not complete then R will show a plus sign (`+`) prompt on second and subsequent lines until the command syntax is correct.\n\n``` r\n+ \n```\n\nPress the escape key (ESC) to break out.\n\n[Hint.]{.important} To recall a previous command, put your cursor in the Console and use the up arrow key (↑). To go between previously typed commands use the up and down arrow (↓) keys. To modify or correct a command use the left (←) and right arrow (→) keys.\n\n\n\n## R scripts\n\nWe recommend that you write your lines of code in a script. Scripts can saved, edited, and run again and again. \n\n- Use *File &gt; New File &gt; R Script* to create a new R script\n- *File &gt; Save As...* to name the file (we suggest `01-R-basics.R`), then save it to the `scripts` directory \n- At the top of the script, add a minimal header, something like: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R basics tutorial\n# R. Layton \n# 2022-06-07 \n```\n:::\n\n\nThe hash symbol `#` denotes a *comment* in R, that is, a line that isn't run. Comments are annotations to make the source code easier for humans to understand but are ignored by R.\n\nIn code chunks like the one above you should see a \"Copy to clipboard\" icon in the upper right corner. Clicking on the icon copies the code chunk to your clipboard and you can paste it into your R script and edit as needed. \n\nNext,  \n\n- Use `library()` to load packages used in the script. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# packages\nlibrary(\"midfieldr\")\n```\n:::\n\n\nRun the script by clicking the *Source* button. Alternatively, you can use the keyboard shortcuts *ctrl A* (MacOS *cmd A*) to select all lines then *ctrl Enter* (MacOS *cmd Return*) to run all lines. (See the appendices for a table of useful keyboard shortcuts.)\n\nIf you see an error like this one, \n\n```\n    Error in library(\"ggplot2\"): there is no package called 'ggplot2'\n```\n\nthen you should install the missing package(s) and run the script again. You can review how to install a package [here](before-you-arrive.html#install-cran-packages).  \n\n\nUse your script throughout the tutorial. When a new chunk of code is given,  \n\n- Copy the line(s) of code into your script, save, and run.     \n- Check your result by comparing it to the result in the tutorial.\n- Check what you've learned using the **Your turn** exercises. \n\n \n\n## R concepts 1\n\nIn R speak, scalars, vectors, variables and datasets are called *objects.* To create objects (things) we use the assignment operator (`<-`). \n\nFor example, the object `height` is assigned a value of 173 as follows,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign a value to a named object \nheight <- 173\n```\n:::\n\n\nTyping the name alone prints out its value, \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# view\nheight\n#> [1] 173\n```\n:::\n\n\nIn these notes, everything that comes back to us in the Console as the result of running a script is shown prefaced by `#>`.\n\n[Warning: R is case sensitive.]{.important} `age` and `AgE` are different:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# illustrating case-sensitivity \nage <- 10\nAgE <- 50\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# display result\nage\n#> [1] 10\nAgE\n#> [1] 50\n```\n:::\n\n\n[New lines.]{.important} R commands are usually separated by a new line but\nthey can also be separated by a semicolon (not recommended). \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# recommended style\nname <- \"Leo\"\nage  <- 25\ncity <- \"Lisbon\"\n\n# views\nname\n#> [1] \"Leo\"\nage\n#> [1] 25\ncity\n#> [1] \"Lisbon\"\n\n# style not recommended \nname <- \"Leo\"; age <- 25; city <- \"Lisbon\"\n\n# view\nname; age; city\n#> [1] \"Leo\"\n#> [1] 25\n#> [1] \"Lisbon\"\n```\n:::\n\n\n[Comments.]{.important} It is useful to put comments in your script---especially useful to the future you looking back at your script after several months.  \n\nR comments start with a hash sign (`#`). Everything after the hash to the end of the line is ignored by R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This comment line is ignored when run.\n\ncity # text after \"#\" is ignored.\n#> [1] \"Lisbon\"\n```\n:::\n\n\n## R as a calculator\n\nYou can use R as a calculator by typing in the Console. Try the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# type in the console\n2 + 3\n#> [1] 5\n\n(5 * 11) / 4 - 7\n#> [1] 6.75\n\n7^3 # exponent\n#> [1] 343\n```\n:::\n\n\n[Other math functions.]{.important} You can also use standard mathematical functions that are typically found on a scientific calculator. \n\n- trigonometric: `sin()`, `cos()`, `tan()`, etc. \n- rounding: `abs()`, `ceiling()`, `floor()`, `round()`, `sign()`,\n`signif()`, `trunc()`\n- logarithms and exponentials: `log()`, `log10()`, `log2()`, `exp()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# type in the console\n\n# square root\nsqrt(2)\n#> [1] 1.414214\n\n# round down to nearest integer\nfloor(8.6178)\n#> [1] 8\n\n# round to 2 decimal places\nround(8.6178, 2)\n#> [1] 8.62\n```\n:::\n\n\n::: panel-tabset\n## Your turn\n\nWhat do the following pairs of examples do?\n\n1. `ceiling(18.33)` and `signif(9488, 2)`\n2. `exp(1)` and `log10(1000)`\n3. `sign(-2.9)` and `sign(32)`\n4. `abs(-27.9) and `abs(11.9)`\n\n## Answer\n\n1. 19 and 9500\n2. 2.718282 and 3\n3. -1 and +1\n4. 27.9 and 11.9\n:::\n\n\n## R concepts 2\n\nFrom this point, please type the R code chunks in your script, save and run, and compare your results to those shown. \n\nYou can do some useful things using the assignment operator (`<-`), for example, \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign dimensions\nroom_length <- 7.8\nroom_width  <- 6.4\n\n# compute area\nroom_area <- room_length * room_width\n\n# view\nroom_area\n#> [1] 49.92\n```\n:::\n\n\n[On coding style.]{.important} we name R objects using so-called \"snake-case\", that is, lowercase letters and numbers with underscores. You may of course use any style you are comfortable with.  \n\n[Text objects.]{.important} You can assign text to an object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign text to an object\ngreeting <- \"Hello world!\"\n\n# view\ngreeting\n#> [1] \"Hello world!\"\n```\n:::\n\n\n[Vectors.]{.important} The objects presented so far have been scalars (single values). Working with vectors is where R shines best as they are the basic building blocks of datasets. \n\nWe can create a vector using the `c()` (combine values into a vector) function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a numeric vector\nx1 <- c(26, 10, 4, 7, 41, 19)\n\n# view\nx1\n#> [1] 26 10  4  7 41 19\n\n# a character vector\nx2 <- c(\"Peru\", \"Italy\", \"Cuba\", \"Ghana\")\n\n# view\nx2\n#> [1] \"Peru\"  \"Italy\" \"Cuba\"  \"Ghana\"\n```\n:::\n\n\nThere are many other ways to create vectors, for example, `rep()`\n(replicate elements) and `seq()` (create sequences):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# repeat vector (2, 6, 7, 4) three times\nr1 <- rep(c(2, 6, 7, 4), times = 3)\n\n# view\nr1\n#>  [1] 2 6 7 4 2 6 7 4 2 6 7 4\n\n\n# vector from -2 to 3 incremented by 0.5\ns1 <- seq(from = -2, to = 3, by = 0.5)\n\n# view\ns1\n#>  [1] -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0  1.5  2.0  2.5  3.0\n```\n:::\n\n\n[Vector operations.]{.important} You can do calculations on vectors, for example using x1 from above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# multiply every element by 2\nx1 * 2\n#> [1] 52 20  8 14 82 38\n\n# operation order: product, root, then round\nround(sqrt(x1 * 2.6), 2)\n#> [1]  8.22  5.10  3.22  4.27 10.32  7.03\n```\n:::\n\n\n[Missing values.]{.important} Missing values are coded as `NA` in R. For example,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# numeric vector with a missing value\nx2 <- c(3, -7, NA, 5, 1, 1)\n\n# view\nx2\n#> [1]  3 -7 NA  5  1  1\n\n# character vector with a missing value\nx3 <- c(\"rat\", NA, \"mouse\", \"hamster\")\n\n# view\nx3\n#> [1] \"rat\"     NA        \"mouse\"   \"hamster\"\n```\n:::\n\n\n[Managing objects.]{.important} Use function `ls()` to list the objects in your\nworkspace. The `rm()` function deletes them. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# view objects in workspace\nls()\n#>  [1] \"age\"         \"AgE\"         \"city\"        \"greeting\"    \"height\"     \n#>  [6] \"name\"        \"r1\"          \"room_area\"   \"room_length\" \"room_width\" \n#> [11] \"s1\"          \"x\"           \"x1\"          \"x2\"          \"x3\"         \n#> [16] \"xm\"\n\n# remove objects\nrm(x1, x2, x3, r1, s1, AgE, age)\n\n# view result\nls()\n#> [1] \"city\"        \"greeting\"    \"height\"      \"name\"        \"room_area\"  \n#> [6] \"room_length\" \"room_width\"  \"x\"           \"xm\"\n```\n:::\n\n\n::: panel-tabset\n## Your turn\n\nCalculate the gross by adding the tax to net amount and round to the nearest integer. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet <- c(108.99, 291.42, 16.28, 62.29, 31.77)\ntax <- c(22.89, 17.49, 0.98, 13.08, 6.67)\n```\n:::\n\n\n## Answer\n\n\n::: {.cell}\n\n```\n#> [1] 132 309  17  75  38\n```\n:::\n\n:::\n\n## R functions and packages\n\n[R functions.]{.important} We have already used some R functions (e.g. `c()`, `mean()`, `rep()`, `sqrt()`, `round()`). Most computation in R involves  functions. \n\nA function essentially has a name and a list of arguments separated by commas. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# closer look at function arguments\nseq(from = 5, to = 8, by = 0.4)\n#> [1] 5.0 5.4 5.8 6.2 6.6 7.0 7.4 7.8\n```\n:::\n\n\n- the function name is `seq` \n- the function has three arguments `from` (the start value), `to` (the end value), and `by` (the increment between values)\n\nThe `seq()` function has other arguments, documented in the help page. For example, we could use the argument `length.out` (instead of `by`) to fix the length of the sequence as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# replacing `by` with `length.out` \nseq(from = 5, to = 8, length.out = 16)\n#>  [1] 5.0 5.2 5.4 5.6 5.8 6.0 6.2 6.4 6.6 6.8 7.0 7.2 7.4 7.6 7.8 8.0\n```\n:::\n\n\n[Custom functions.]{.important} As you gain familiarity with R, you may want to learn how to construct your own custom functions, but that's not an objective of our \"basics\" tutorials. \n\n[R packages.]{.important} The basic R installation comes with over 2000 functions, but R can be extended further using contributed *packages*. Packages are like \"apps\" for R, containing functions, data, and documentation. \n\nTo see a list of functions and data sets bundled in a package, use the `ls()` function, e,g,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls(\"package:midfieldr\")\n#>  [1] \"add_completion_timely\" \"add_data_sufficiency\"  \"add_institution\"      \n#>  [4] \"add_race_sex\"          \"add_timely_term\"       \"cip\"                  \n#>  [7] \"condition_fye\"         \"condition_multiway\"    \"filter_match\"         \n#> [10] \"filter_search\"         \"fye_start\"             \"study_grad_rate\"      \n#> [13] \"study_program\"         \"study_stickiness\"      \"study_student\"        \n#> [16] \"toy_course\"            \"toy_degree\"            \"toy_student\"          \n#> [19] \"toy_term\"\n```\n:::\n\n\nAlternatively, in RStudio select the `Packages` tab and in its menu bar type the package name in the search box. In the pane, click on the package name. A help page opens listing all the functions and names of data sets in the package, e.g., \n\n![](figures/rstudio-package-functions.png)\n\nIn this work, we use a small number of R packages:\n\n- midfieldr for tools to study student unit records\n- midfielddata for practice data \n- data.table for manipulating data \n- ggplot2 for charts \n\n\n\n\n\n\n\n\n\n\n\n## Keyboard shortcuts {.appendix}\n\nIf you are working in RStudio, you can see the menu of keyboard shortcuts using the menu *Tools \\> Keyboard Shortcuts Help*.\n\nThe shortcuts we use regularly include\n\n\n::: {.cell}\n::: {.cell-output-display}\n|Windows / Linux |Action                              |Mac OS         |\n|:---------------|:-----------------------------------|:--------------|\n|`ctrl shift K`  |Compile R Markdown document         |`cmd shift K`  |\n|`ctrl L`        |Clear the RStudio Console           |`ctrl L`       |\n|`ctrl shift C`  |Comment/uncomment line(s)           |`cmd shift C`  |\n|`ctrl X, C, V`  |Cut, copy, paste                    |`cmd X, C, V`  |\n|`ctrl F`        |Find in text                        |`cmd F`        |\n|`ctrl I`        |Indent or re-indent lines od code   |`cmd I`        |\n|`alt` --        |Insert the assignment operator `<-` |`option` --    |\n|`ctrl alt B`    |Run from  begining to line          |`cmd option B` |\n|`ctrl alt E`    |Run from line to end                |`cmd option E` |\n|`ctrl Enter`    |Run selected line(s)                |`cmd Return`   |\n|`ctrl S`        |Save                                |`cmd S`        |\n|`ctrl A`        |Select all text                     |`cmd A`        |\n|`ctrl Z`        |Undo                                |`cmd Z`        |\n:::\n:::\n\n\n## References {.appendix}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}