{
  "hash": "2ef3b2770bc56eb58affea38d58a1ca2",
  "result": {
    "markdown": "---\ntitle: \"R basics\"\nauthor: \"Richard Layton\"\ndate: \"2022-06-08\"\n---\n\n\n\n\nAn introduction to R---a free software environment for statistical computing and graphics. \n\n## Prerequisites\n\nOur tutorials assume that you\n\n- Have completed the [Before you arrive](before-you-arrive.html) instructions  \n- Start your R session by launching the RStudio project you created, e.g., `midfield-institute-2022.Rproj` \n\n\n\n\n## Scripts\n\nWe recommend that you write your lines of code in a script. Scripts can saved, edited, and run again and again. \n\n- Use *File &gt; New File &gt; R Script* to create a new R script\n- *File &gt; Save As...* to name the file (we suggest `01-R-basics.R`), then save it to the `scripts` directory \n- At the top of the script, add a minimal header, something like: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R basics tutorial\n# R. Layton \n# 2022-06-07 \n```\n:::\n\n\nThe hash symbol `#` denotes a *comment* in R, that is, a line that isn't run. Comments are annotations to make the source code easier for humans to understand but are ignored by R.\n\nIn code chunks like the one above you should see a \"Copy to clipboard\" icon in the upper right corner. Clicking on the icon copies the code chunk to your clipboard and you can paste it into your R script and edit as needed. \n\nNext,  \n\n- Use `library()` to load packages used in the script. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# packages\nlibrary(\"midfieldr\")\nlibrary(\"ggplot2\")\n```\n:::\n\n\nRun the script by clicking the *Source* button. Alternatively, you can use the keyboard shortcuts *ctrl A* (MacOS *cmd A*) to select all lines then *ctrl Enter* (MacOS *cmd Return*) to run all lines. (See the appendices for a table of useful keyboard shortcuts.)\n\nIf you see an error like this one, \n\n```\n    Error in library(\"ggplot2\"): there is no package called 'ggplot2'\n```\n\nthen you should install the missing package(s) and run the script again. You can review how to install a package [here](before-you-arrive.html#install-cran-packages).  \n\n\nUse your script throughout the tutorial. When a new chunk of code is given,  \n\n- Copy the line(s) of code into your script, save, and run.     \n- Check your result by comparing it to the result in the tutorial.\n- Check what you've learned using the **Your turn** exercises. \n\n\n\n\n\n\n## Names\n\nEverything in R has a name. \n\n- named entities, like `x` or `y`  \n- data you have loaded, like `my_data` \n- functions you use, like `cos()` \n\nSome names are forbidden \n\n- reserved words, like `TRUE` or `FALSE`  \n- programming words, like `Inf`, `for`, `else`, and `function`  \n- special entities, like `NA` and `NaN`  \n\nAvoid naming an object with the name of an already existing function, e.g.,  \n\n- `q()`  quit \n- `c()` combine or concatenate \n- `mean()` \n- `range()` \n\nNames in R are case-sensitive \n\n- `my_data` and `my_Data` are different objects \n- We use \"snake-case\" for naming objects, that is, lowercase letters, numbers, and underscores (`_`) to separate words within a name.\n\nIf you want to know if a name is in use, in the RStudio console type a question mark followed by the name, e.g., \n\n- `? c()` \n- `? mean()`\n\nIf the name is in use, a help page appears in the RStudio Help pane.  \n\n\n\n\n\n\n## Objects\n\nEverything in R is an object.   \n\n- Some objects are built in to R \n- Some objects are loaded with packages \n- Some objects are created by you \n\n\nType this line of code in your script, save, and run. `c()` is the function to combine or concatenate its elements to create a vector. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a numerical vector\nc(1, 2, 3, 1, 3, 25)\n```\n:::\n\n\nIn these notes, everything that comes back to us in the Console as the result of running a script is shown prefaced by `#>`. For example, after running your script, the Console should show, \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]  1  2  3  1  3 25\n```\n:::\n:::\n\n\nThe `[1]` printed here is a row label---we'll come back to that. \n\nYou create an object and assign it to a name using the assignment operator (`<-`). The keyboard shortcut is *alt --* (MacOS *option --*).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assigning and object to a name\n# \nx <- c(1, 2, 3, 1, 3, 25)\ny <- c(5, 31, 71, 1, 3, 21, 6)\n```\n:::\n\n\nTo see the object assigned to a name, type the name in the script, save, and run, e.g., \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# display objects by name\nx\n#> [1]  1  2  3  1  3 25\n\ny\n#> [1]  5 31 71  1  3 21  6\n```\n:::\n\n\nObjects in your R project workspace are listed in the RStudio Environment pane. \n\n![](figures/rstudio-environment-x-y.png)\n\nDatasets are also named objects, and a large number of datasets are included in the base R installation. For example,`state.area` is a vector of the areas (in square miles) of the 50 US states.  \n\nType into your script, save, and run. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data set bundled with R\nstate.area\n```\n:::\n\n\n![](figures/state-area-output.png)\n\nNow you can see how the row labels work. In this example, there are 10 numbers  per row, so the second rows starts with `[11]`, the third with `[21]`, etc. \n\n- In the Console, type `? state.area` to see the help page for the data set.  The \"Details\" section of the help page notes that data are arranged in  alphabetical order of the state names.\n\nSubsets of a vector are obtained using square bracket (`[]`) notation. For example, the first five areas are extracted with, \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset elements 1 through 5\nstate.area[1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]  51609 589757 113909  53104 158693\n```\n:::\n:::\n\n\nThe 5th element alone, \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset element 5\nstate.area[5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 158693\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n## Functions\n\nYou do useful things in R with functions. \n\n- functions are objects the perform actions for you \n- functions produce output based on the input it receives \n- functions are recognized by the parentheses at the end of their names \n\nThe parentheses are where we include the inputs (arguments) to the function. \n\n- `c()` concatenates the comma-separated numbers to create a vector \n- `mean()` computes the mean of a vector of numbers \n- `sd()` computes the standard deviation of a vector of numbers \n- `summary()` returns a summary of the object \n\nIf we try `mean()` with no inputs, we get an error statement. \n\n    mean()\n    #> Error in mean.default() : argument \"x\" is missing, with no default\n\nIf we use the `state.area` data as the argument, the function is computed and displayed. Add these lines to your script, save, and run. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mean\nmean(state.area)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 72367.98\n```\n:::\n\n```{.r .cell-code}\n# standard deviation\nsd(state.area)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 88278.01\n```\n:::\n\n```{.r .cell-code}\n# object summary\nsummary(state.area)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>    1214   37317   56222   72368   83234  589757\n```\n:::\n:::\n\n\nWe can extract subsets of data using functions. For example, the US state abbreviations are available in the `state.abb` data set that comes with R. If we wanted every other state area up to the first 10 states, we use `c()` function to create a vector of indices to the desired elements, \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset a vector using specified indices\nstate.abb[c(2, 4, 6, 8, 10)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"AK\" \"AR\" \"CO\" \"DE\" \"GA\"\n```\n:::\n:::\n\n\nIf we wanted every 5th entry over the full data set, we use the `length()` function to determine how many entries there are, and the sequence function `seq()` to create the vector of indices, \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# vector length\nn <- length(state.abb)\n\n# subset a vector using a sequence of indices\nstate.abb[seq(from = 5, to = n, by = 5)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] \"CA\" \"GA\" \"IA\" \"MD\" \"MO\" \"NJ\" \"OH\" \"SC\" \"VT\" \"WY\"\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Packages\n\nThe basic R installation includes many functions. R packages provide specialized functions. \n\n- Families of useful functions are bundled into packages that you can install, load, and use \n- Packages allow you to build on the work of others \n- You can also write your own functions and packages  \n- A lot of the work in data science consists of choosing the right functions and giving them the right arguments to get our data into the form we need for analysis or visualization \n\nFunctions operate on the input you provide and give you back a result. Type the following in your script, save, and run.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx        # the x vector from earlier\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]  1  2  3  1  3 25\n```\n:::\n\n```{.r .cell-code}\ntable(x) # the frequency that numbers appear in x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> x\n#>  1  2  3 25 \n#>  2  1  2  1\n```\n:::\n\n```{.r .cell-code}\ny        # the y vector from earlier \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]  5 31 71  1  3 21  6\n```\n:::\n\n```{.r .cell-code}\nsd(y)    # standard deviation\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 25.14435\n```\n:::\n\n```{.r .cell-code}\nx * 5    # multiply every element by a scalar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]   5  10  15   5  15 125\n```\n:::\n\n```{.r .cell-code}\ny + 1    # add a scalar to every element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]  6 32 72  2  4 22  7\n```\n:::\n\n```{.r .cell-code}\nx + x    # add elements of vectors of equal length\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]  2  4  6  2  6 50\n```\n:::\n:::\n\n\nTo see a list of functions and data sets bundled in a package, use the `ls()` function, e,g,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls(\"package:midfieldr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] \"add_completion_timely\" \"add_data_sufficiency\"  \"add_institution\"      \n#>  [4] \"add_race_sex\"          \"add_timely_term\"       \"cip\"                  \n#>  [7] \"condition_fye\"         \"condition_multiway\"    \"filter_match\"         \n#> [10] \"filter_search\"         \"fye_start\"             \"study_grad_rate\"      \n#> [13] \"study_program\"         \"study_stickiness\"      \"study_student\"        \n#> [16] \"toy_course\"            \"toy_degree\"            \"toy_student\"          \n#> [19] \"toy_term\"\n```\n:::\n:::\n\n\nAlternatively, in RStudio select the `Packages` tab and in its menu bar type the package name in the search box. In the pane, click on the package name. A help page opens listing all the functions and names of data sets in the package, e.g., \n\n![](figures/rstudio-package-functions.png)\n\n\n\n\n\n\n\n## Classes\n\nEverything in R has class. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"function\"\n```\n:::\n:::\n\n\nCertain actions will change the class of an object. Suppose we try create a vector from the `x` object and a text string, \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_vector <- c(x, \"Apple\")\nnew_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"1\"     \"2\"     \"3\"     \"1\"     \"3\"     \"25\"    \"Apple\"\n```\n:::\n\n```{.r .cell-code}\nclass(new_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"character\"\n```\n:::\n:::\n\n\nBy adding the word \"Apple\" to the vector, R changed the class from \"numeric\" to \"character\". All the numbers are enclosed in quotes: they are now character strings and cannot be used in calculations. \n\nThe most common class of data object we will use is the *data frame*: a two-dimensional array of rows and columns in R. All values in a column are of the same type (numerical, character, logical, etc.) but columns can be of different types. \n\nFor example, the data frame `study_grad_rate` that is bundled with midfieldr has two character columns and one numerical column. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a data frame bundled with midfieldr\nstudy_grad_rate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>        program               race_sex grad_rate\n#>  1:      Civil           Asian Female      57.5\n#>  2:      Civil             Asian Male      58.5\n#>  3:      Civil           Black Female      36.8\n#>  4:      Civil             Black Male      35.2\n#>  5:      Civil Hispanic/Latinx Female      53.9\n#>  6:      Civil   Hispanic/Latinx Male      52.2\n#>  7:      Civil           White Female      61.2\n#>  8:      Civil             White Male      59.8\n#>  9: Electrical           Asian Female      55.3\n#> 10: Electrical             Asian Male      56.3\n#> 11: Electrical           Black Female      42.6\n#> 12: Electrical             Black Male      38.8\n#> 13: Electrical Hispanic/Latinx Female      50.6\n#> 14: Electrical   Hispanic/Latinx Male      45.2\n#> 15: Electrical           White Female      48.0\n#> 16: Electrical             White Male      46.4\n#> 17: Industrial           Asian Female      62.8\n#> 18: Industrial             Asian Male      60.9\n#> 19: Industrial           Black Female      56.9\n#> 20: Industrial             Black Male      44.2\n#> 21: Industrial Hispanic/Latinx Female      76.3\n#> 22: Industrial   Hispanic/Latinx Male      68.3\n#> 23: Industrial           White Female      65.9\n#> 24: Industrial             White Male      59.6\n#> 25: Mechanical           Asian Female      59.1\n#> 26: Mechanical             Asian Male      55.4\n#> 27: Mechanical           Black Female      51.7\n#> 28: Mechanical             Black Male      41.6\n#> 29: Mechanical Hispanic/Latinx Female      52.0\n#> 30: Mechanical   Hispanic/Latinx Male      44.9\n#> 31: Mechanical           White Female      56.1\n#> 32: Mechanical             White Male      55.8\n#>        program               race_sex grad_rate\n```\n:::\n\n```{.r .cell-code}\nclass(study_grad_rate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"data.table\" \"data.frame\"\n```\n:::\n:::\n\n\nThe `class()` function reveals that this `data.frame` object is also a `data.table` object, which is an enhanced version of R's standard data frame. We won't dwell on the enhancements at this early stage, but they are handy for faster data manipulation with large data sets (e.g. 100GB in RAM). \n\nYou can select a variable from a data frame using the `$` operator, yielding a vector of values, \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy_grad_rate$program\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] \"Civil\"      \"Civil\"      \"Civil\"      \"Civil\"      \"Civil\"     \n#>  [6] \"Civil\"      \"Civil\"      \"Civil\"      \"Electrical\" \"Electrical\"\n#> [11] \"Electrical\" \"Electrical\" \"Electrical\" \"Electrical\" \"Electrical\"\n#> [16] \"Electrical\" \"Industrial\" \"Industrial\" \"Industrial\" \"Industrial\"\n#> [21] \"Industrial\" \"Industrial\" \"Industrial\" \"Industrial\" \"Mechanical\"\n#> [26] \"Mechanical\" \"Mechanical\" \"Mechanical\" \"Mechanical\" \"Mechanical\"\n#> [31] \"Mechanical\" \"Mechanical\"\n```\n:::\n\n```{.r .cell-code}\nstudy_grad_rate$grad_rate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] 57.5 58.5 36.8 35.2 53.9 52.2 61.2 59.8 55.3 56.3 42.6 38.8 50.6 45.2 48.0\n#> [16] 46.4 62.8 60.9 56.9 44.2 76.3 68.3 65.9 59.6 59.1 55.4 51.7 41.6 52.0 44.9\n#> [31] 56.1 55.8\n```\n:::\n:::\n\n\n::: {.panel-tabset}\n## Your turn\nDetermine the class of the following midfieldr objects:\n\n- `add_institution`\n- `toy_student`\n\n## Answer\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"function\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"data.table\" \"data.frame\"\n```\n:::\n:::\n\n\n## Your turn\nUse the `toy_term` data frame in midfieldr. Determine: \n\n- the names of the variables (columns)\n- the average number of hours per term (use `$` and `mean()`)\n\n## Answer\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"mcid\"        \"institution\" \"term\"        \"cip6\"        \"level\"      \n#> [6] \"hours_term\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 12.94675\n```\n:::\n:::\n\n:::\n\n\n\n\n\n\n\n\n## Structures\n\nEverything in R has structure. \n\nWe can use the `str()` function to display the structure of the data frame, including its variable types and dimensions.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(study_grad_rate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Classes 'data.table' and 'data.frame':\t32 obs. of  3 variables:\n#>  $ program  : chr  \"Civil\" \"Civil\" \"Civil\" \"Civil\" ...\n#>  $ race_sex : chr  \"Asian Female\" \"Asian Male\" \"Black Female\" \"Black Male\" ...\n#>  $ grad_rate: num  57.5 58.5 36.8 35.2 53.9 52.2 61.2 59.8 55.3 56.3 ...\n#>  - attr(*, \".internal.selfref\")=<externalptr>\n```\n:::\n:::\n\n\nThe `str()` function can be applied to *any* R object,  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# character vector\nstr(new_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  chr [1:7] \"1\" \"2\" \"3\" \"1\" \"3\" \"25\" \"Apple\"\n```\n:::\n\n```{.r .cell-code}\n# numerical vector\nstr(study_grad_rate$grad_rate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  num [1:32] 57.5 58.5 36.8 35.2 53.9 52.2 61.2 59.8 55.3 56.3 ...\n```\n:::\n\n```{.r .cell-code}\n# function \nstr(str)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> function (object, ...)\n```\n:::\n:::\n\n\nWhen applied to a function, `str()` also displays the arguments of the function. For example, applying `str()` to the `sd` function yields, \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> function (x, na.rm = FALSE)\n```\n:::\n:::\n\n\nThus `sd()` is a function that has an argument `x`, where `x` is an R object, and a second argument `na.rm = FALSE`. To learn more, view the function's help page by running `? sd()`. \n\n\n::: {.panel-tabset}\n## Your turn\nUse `str()` to determine \n\n1. `add_institution` arguments\n2. `toy_student` dimensions\n3. `toy_term` numerical variables\n\n## Answer\n\n1. `dframe`, `midfield_term`\n2. 100 rows x 6 columns\n3. `hours_term` \n:::\n\n\n\n## Mistakes \n\nExpect to make errors and don't worry when that happens. You won't break anything.\n\nHealy [-@Healy:2019] offers this advice for three specific things to watch out for: \n\n- Make sure parentheses are balanced---that every opening `(` has a corresponding closing `)`.  \n- Make sure you complete your expressions. If you see a `+` in the Console instead of the usual prompt `>`, that means that R thinks you haven't written a complete expression. You can hit `Esc` or `CTRL-C` to force your way back to the Console and try correcting the code.  \n- In ggplot specifically, as you will see, we create plots layer by layer, using a `+` character at the end of the line---not at the beginning of the next line. \n\nFor example, you would write this, \n\n```r\nggplot(data = mpg, aes(x = displ, y = hwy)) +\n    geom_point()\n```\n\nnot this,  \n\n```r  \n# error caused by incorrectly placed +\nggplot(data = mpg, aes(x = displ, y = hwy))  \n    + geom_point()\n```\n\nTo conclude, let's graph the `study_grad_rate` data. Don't worry about the syntax just yet, we cover graph basics in the next tutorial. \n\n\n::: {.cell fig.asp='0.5'}\n\n```{.r .cell-code}\nggplot(data = study_grad_rate, mapping = aes(x = grad_rate, y = program)) +\n  facet_wrap(vars(race_sex), ncol = 4) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](r-basics-old_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n::: {.panel-tabset}\n## Your turn\nThe code chunk above that creates the chart is written to group the facets of the chart by  the race-ethnicity-sex column of the `study_grad_rate` data frame.  \n\nMake small changes to the code to create a new chart such that the panels are grouped by the engineering program and the race-ethnicity-sex variable inhabits the rows along the vertical scale. \n\n## Answer\n\n::: {.cell fig.asp='0.4'}\n::: {.cell-output-display}\n![](r-basics-old_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Appendices\n## Keyboard shortcuts {.appendix}\n\nIf you are working in RStudio, you can see the menu of keyboard shortcuts using the menu  *Tools > Keyboard Shortcuts Help*. \n\nThe shortcuts we use regularly include \n\n\n::: {.cell}\n::: {.cell-output-display}\n|Windows / Linux |Action                              |Mac OS         |\n|:---------------|:-----------------------------------|:--------------|\n|`ctrl shift K`  |Compile R Markdown document         |`cmd shift K`  |\n|`ctrl L`        |Clear the RStudio Console           |`ctrl L`       |\n|`ctrl shift C`  |Comment/uncomment line(s)           |`cmd shift C`  |\n|`ctrl X, C, V`  |Cut, copy, paste                    |`cmd X, C, V`  |\n|`ctrl F`        |Find in text                        |`cmd F`        |\n|`ctrl I`        |Indent or re-indent lines od code   |`cmd I`        |\n|`alt` --        |Insert the assignment operator `<-` |`option` --    |\n|`ctrl alt B`    |Run from  begining to line          |`cmd option B` |\n|`ctrl alt E`    |Run from line to end                |`cmd option E` |\n|`ctrl Enter`    |Run selected line(s)                |`cmd Return`   |\n|`ctrl S`        |Save                                |`cmd S`        |\n|`ctrl A`        |Select all text                     |`cmd A`        |\n|`ctrl Z`        |Undo                                |`cmd Z`        |\n:::\n:::\n",
    "supporting": [
      "r-basics-old_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}