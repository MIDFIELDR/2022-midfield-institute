{
  "hash": "c1fcbda7d83648b4bc7e990affdefbb7",
  "result": {
    "markdown": "---\ntitle: \"R chart basics\"\n---\n\n\nAn introduction to ggplot2, an R package for creating charts of quantitative data, adapted and edited from [@Bashir+Eddelbuettel:2018] licensed under [CC BY SA](https://creativecommons.org/licenses/by-sa/2.0/legalcode) by [ilustat](https://ilustat.com/post/writing-real-life-motivated-r-guides/).\n\n\n\n\n\n\n## Preface\n\n[Before starting.]{.important} Our tutorials assume that you\n\n- Have completed the [Before you arrive](before-you-arrive.html) instructions\n- Have completed the [R basics](r-basics.html) guide \n- Start your R session by launching the RStudio project you created, e.g., `midfield-institute-2022.Rproj`\n\n\n[Start a new script.]{.important} We recommend that you start a new script for this segment. \n\n- Use *File &gt; New File &gt; R Script* to create a new R script\n- *File &gt; Save As...* to name the file (we suggest `02-chart-basics.R`), then save it to the `scripts` directory \n- At the top of the script, add a minimal header, something like: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Chart basics\n# R. Layton \n# 2022-06-07 \n```\n:::\n\n\n- Use `library()` to load packages used in the script. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# silently load packages\nsuppressMessages(library(\"ggplot2\"))\nsuppressMessages(library(\"data.table\"))\n```\n:::\n\n\n- Save and run. \n\n## Data\n\n[Introduction.]{.important} R comes with many datasets installed. We'll use the `ChickWeight` data set to cover some basic data manipulation to prepare the data for graphing. \n\nThe help page for `ChickWeight` summarizes the experiment from which the data were collected,  \n\n> The body weights of the chicks were measured at birth and every second day thereafter until day 20. They were also measured on day 21. There were four groups of chicks on different protein diets.‚Äù \n\nYou can view the help page by running,  \n\n``` r\nhelp(\"ChickWeight\")\n```\n\nThere are 578 observations (rows) and 4 variables (columns). Recall that names are case-sensitive---`weight` is lowercase, the other variables are capitalized. \n\n- `Chick`: unique ID for each chick.\n- `Diet`: one of four protein diets.\n- `Time`: number of days since birth.\n- `weight`: body weight of chick in grams.\n\nThe goal of graphing the data is to investigate the effect of diet on weight over time.\n\n[Download a CSV file.]{.important} In the [Before you arrive](before-you-arrive.html) instructions, you were asked to create a `data` folder (directory) at the top level of your RStudio project. \n\nWe use `fread()` function from the data.table package to read the data set from the workshop repository (an Internet connection is required). \n\n```r\n# data URL\ndata_url <- \"https://raw.githubusercontent.com/MIDFIELDR/2022-midfield-institute/main/data/chick_weight.csv\"\n\n# download the data\nchick_weight <- fread(data_url)\n\n# write the data to your data directory\nfwrite(chick_weight, \"data/chick_weight.csv\")\n```\n\nThese lines of code only have to be run once because from now on you'll read the data from your local directory. Once run, the code chunk above can be commented out of your script, e.g.,  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # data URL\n# data_url <- \"https://raw.githubusercontent.com/MIDFIELDR/2022-midfield-institute/main/data/chick_weight.csv\"\n# \n# # download the data\n# chick_weight <- fread(data_url)\n# \n# # write the data to your data directory\n# fwrite(chick_weight, \"data/chick_weight.csv\")\n```\n:::\n\n\n[Read a local CSV file.]{.important} We import the data from the local file  `chick_weight.csv` using `fread()`. This function returns a data.table object with a structure slightly different from the same data set built into R. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncw <- fread(\"data/chick_weight.csv\")\n```\n:::\n\n\n[Important note.]{.important} If all goes well then the data is now in your environment in an R object called `cw`. If you get the following error message then you need to change the working directory to where the data is stored.\n\n```r\nError: 'chick_weight.csv' does not exist in current working directory ...\n```\n\n[Change the working directory in RStudio.]{.important} First, confirm that you are working within the R project your set up for the workshop. \n\n- If you are in the project, the project name appears in the upper left corner of the RStudio window. If true, then from the RStudio menu, pull down *Session &gt; Set Working Directory &gt; To Project Directory* and run the script again. \n- If you are not in the project, navigate to the folder you created for the project and launch the `midfield-institute-2022.Rproj` file.  \n- If that project does not exist, you can create it following the [Before you arrive](before-you-arrive.html) instructions. \n\nWhen a project is opened within RStudio,\n\n- A new R session (process) is started.\n- The current working directory is set to the project directory, facilitating the use of relative file paths. \n- Other RStudio settings are restored to where they were the last time the project was closed.\n\n[Look at the data.]{.important} To look at the data, type the object (dataset) name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# view the data\ncw\n#>      Chick Diet Time weight\n#>   1:    18    1    0     39\n#>   2:    18    1    2     35\n#>   3:    16    1    0     41\n#>   4:    16    1    2     45\n#>   5:    16    1    4     49\n#>  ---                       \n#> 574:    48    4   14    170\n#> 575:    48    4   16    222\n#> 576:    48    4   18    261\n#> 577:    48    4   20    303\n#> 578:    48    4   21    322\n```\n:::\n\n\nSeveral base R functions help us inspect the data: \n\n- `str()` compactly displays the structure\n- `summary()` provides a summary\n- `head()` and `tail()` display the beginning and end of the data set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(cw)\n#> Classes 'data.table' and 'data.frame':\t578 obs. of  4 variables:\n#>  $ Chick : int  18 18 16 16 16 16 16 16 16 15 ...\n#>  $ Diet  : int  1 1 1 1 1 1 1 1 1 1 ...\n#>  $ Time  : int  0 2 0 2 4 6 8 10 12 0 ...\n#>  $ weight: int  39 35 41 45 49 51 57 51 54 41 ...\n#>  - attr(*, \".internal.selfref\")=<externalptr>\n```\n:::\n\n\nThis shows that the dataset has 578 observations and 4 variables as expected. The `str()` output displays the variable types (here, all integers) and the first few values. The RStudio *Environment* pane provides a very similar view.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(cw)\n#>      Chick            Diet            Time           weight     \n#>  Min.   : 1.00   Min.   :1.000   Min.   : 0.00   Min.   : 35.0  \n#>  1st Qu.:13.00   1st Qu.:1.000   1st Qu.: 4.00   1st Qu.: 63.0  \n#>  Median :26.00   Median :2.000   Median :10.00   Median :103.0  \n#>  Mean   :25.75   Mean   :2.235   Mean   :10.72   Mean   :121.8  \n#>  3rd Qu.:38.00   3rd Qu.:3.000   3rd Qu.:16.00   3rd Qu.:163.8  \n#>  Max.   :50.00   Max.   :4.000   Max.   :21.00   Max.   :373.0\n```\n:::\n\n\n\n::: panel-tabset\n## Your turn\n\nUse `tail()` to examine the last observations in `cw` and compare to the last observations in the `ChickWeight` data set provided in base R. \n\nDo they agree? Describe the differences, if any. \n\n\n## Answer\n\nThe variables (columns) are the same but in different order. The observations (rows) are apparently in different order too. \n\n\n::: {.cell}\n\n```\n#>    Chick Diet Time weight\n#> 1:    48    4   12    154\n#> 2:    48    4   14    170\n#> 3:    48    4   16    222\n#> 4:    48    4   18    261\n#> 5:    48    4   20    303\n#> 6:    48    4   21    322\n#>     weight Time Chick Diet\n#> 573    155   12    50    4\n#> 574    175   14    50    4\n#> 575    205   16    50    4\n#> 576    234   18    50    4\n#> 577    264   20    50    4\n#> 578    264   21    50    4\n```\n:::\n\n\nAlso, the row numbers in `cw` (a data.table) are different from the row numbers in `ChickWeight`. \n\n## Your turn\n\nUse `str()` to compare `cw` to the original `ChickWeight` in base R. \n\nHow are they different?\n\n## Answer\n\n`cw` is a data.frame and a data.table object and the variables are all integers. \n\n\n::: {.cell}\n\n```\n#> Classes 'data.table' and 'data.frame':\t578 obs. of  4 variables:\n#>  $ Chick : int  18 18 16 16 16 16 16 16 16 15 ...\n#>  $ Diet  : int  1 1 1 1 1 1 1 1 1 1 ...\n#>  $ Time  : int  0 2 0 2 4 6 8 10 12 0 ...\n#>  $ weight: int  39 35 41 45 49 51 57 51 54 41 ...\n#>  - attr(*, \".internal.selfref\")=<externalptr>\n```\n:::\n\n\n`ChickWeight` is a data.frame and a groupedData object (a type of ordered grouping). Two columns are integers but two are factors. We'll discuss factors in due course. \n\n\n::: {.cell}\n\n```\n#> Classes 'nfnGroupedData', 'nfGroupedData', 'groupedData' and 'data.frame':\t578 obs. of  4 variables:\n#>  $ weight: num  42 51 59 64 76 93 106 125 149 171 ...\n#>  $ Time  : num  0 2 4 6 8 10 12 14 16 18 ...\n#>  $ Chick : Ord.factor w/ 50 levels \"18\"<\"16\"<\"15\"<..: 15 15 15 15 15 15 15 15 15 15 ...\n#>  $ Diet  : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 1 1 1 1 1 1 1 1 1 ...\n#>  - attr(*, \"formula\")=Class 'formula'  language weight ~ Time | Chick\n#>   .. ..- attr(*, \".Environment\")=<environment: R_EmptyEnv> \n#>  - attr(*, \"outer\")=Class 'formula'  language ~Diet\n#>   .. ..- attr(*, \".Environment\")=<environment: R_EmptyEnv> \n#>  - attr(*, \"labels\")=List of 2\n#>   ..$ x: chr \"Time\"\n#>   ..$ y: chr \"Body weight\"\n#>  - attr(*, \"units\")=List of 2\n#>   ..$ x: chr \"(days)\"\n#>   ..$ y: chr \"(gm)\"\n```\n:::\n\n:::\n\n\n## Scatterplot\n\n[ggplot2 package.]{.important} We use the ggplot2 package to visualize the chick weight data. Our goal is to examine how weight changes over time conditioned by diet. \n\nDon't worry too much about the details of the syntax. To learn more, try different things even if you get an error message. No harm is done! \n\n[First plot.]{.important} Let‚Äôs plot the weight data (y axis) as a function of time (x axis). The first plot is empty because there is no \"geom\" (a geometric object) to encode the data visually. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = cw, mapping = aes(x = Time, y = weight))\n```\n\n::: {.cell-output-display}\n![](chart-basics_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nNext we add the `geom_point()` layer to encode the data as points in a scatterplot. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = cw, mapping = aes(x = Time, y = weight)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](chart-basics_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n::: panel-tabset\n## Your turn\n\nSwitch the variables `Time` and `weight` in the code chunk.\n\nWhat do you think of this new plot compared to the original?\n\n## Answer\n\nIn a time series, the visual convention (in Latin/Roman-descended societies) is for time to read from left to right, so this chart is not as intuitive as the earlier chart. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](chart-basics_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n:::\n\n##  Add a category\n\n[Add color for Diet.]{.important} The graph does not differentiate between the diets. Essentially we use color to encode a third variable, `Diet`, a categorical variable. One important thing to notice is that all arguments being \"mapped\" must be names of variables in the `cw` data frame. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = cw, mapping = aes(x = Time, y = weight, color = factor(Diet))) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](chart-basics_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nIt is difficult to conclude anything from this graph as the points are printed on top of one another (with diet 1 underneath and diet 4 at the top).\n\n\n## Faceted chart\n\n[Factor variables.]{.important} Before we continue, we make an important change to the `cw` dataset by making `Diet` and `Time factor` variables. This means that R will treat them as categorical variables instead of continuous variables. It will simplify our coding.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create factors using data.table syntax\ncw[, Diet := factor(Diet)]\ncw[, Time := factor(Time)]\n\n# notice the difference ?\nsummary(cw) \n#>      Chick       Diet         Time         weight     \n#>  Min.   : 1.00   1:220   0      : 50   Min.   : 35.0  \n#>  1st Qu.:13.00   2:120   2      : 50   1st Qu.: 63.0  \n#>  Median :26.00   3:120   4      : 49   Median :103.0  \n#>  Mean   :25.75   4:118   6      : 49   Mean   :121.8  \n#>  3rd Qu.:38.00           8      : 49   3rd Qu.:163.8  \n#>  Max.   :50.00           10     : 49   Max.   :373.0  \n#>                          (Other):282\n```\n:::\n\n\nThe `:=` operator altered the variables ‚Äúin-place‚Äù, and no explicit assignment was made. This is a key feature of data.table which operated ‚Äúby reference‚Äù: changes are made in reference to one instance of the cw variable, rather than by creating updated copies. We revisit the `:=` operator below.\n\n[facet_wrap() function.]{.important} `facet_wrap()` is a ggplot2 function that plots variables in separate facets, or panels. In this case, each facet contains one of the four diets. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create facets by Diet \nggplot(data = cw, mapping = aes(x = Time, y = weight, color = Diet)) +\n  geom_point() +\n  facet_wrap(vars(Diet)) +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](chart-basics_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n::: panel-tabset\n## Your turn\n\n- To address \"overprinting\" (where points print over other points in the same position), replace `geom_point()` with `geom_jitter()`. \n- What observations about the data can you make? \n\n## Answer\n\n::: {.cell}\n::: {.cell-output-display}\n![](chart-basics_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n- Jittering allows a much better view of the full data set. \n- Diet 4 has the least variability. \n- Diet 3 seems to have the highest weights. \n- We can't really say anything about the mean effect of each diet. \n\n## Your turn\n\nFor the `legend.position` argument, try using ‚Äútop‚Äù, ‚Äúleft‚Äù and\n‚Äúnone‚Äù. \n\nDo we really need a legend for this plot?\n\n## Answer\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](chart-basics_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nHere, the `legend.position` argument is \"none\". The diet types are in the panel headers, so a legend is unnecessary. \n:::\n\n## Mean line chart\n\nNext we plot the *mean* changes over time for each diet using the `stat_summary()` function. Because we do not have facets this time, we use the default legend. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = cw, mapping = aes(x = Time, y = weight, group = Diet, color = Diet)) +\n  stat_summary(fun.y = \"mean\", geom = \"line\")\n```\n\n::: {.cell-output-display}\n![](chart-basics_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nWe see that diet 3 has the highest mean weight gain by the end of the experiment but we don‚Äôt have any information about the variation (uncertainty) in the data.\n\n::: panel-tabset\n\n## Your turn\n\n- What happens when you add `geom_point()` to the plot above? Don‚Äôt forget the `+`. \n- Does it make a difference if you put it before or after `stat_summary(...)`? \n- Hint: Look carefully at how the graph is plotted.\n\n## Answer\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](chart-basics_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n- The chart is the same either way. \n- The underlying idea in ggplot2 is that a chart is assembled in layers, adding a new layer to previous layers using the `+` operator. \n:::\n\n\n\n## Box & whisker plot\n\nTo see variation between the different diets we use `geom_boxplot()` to plot a box & whisker plot. A note of caution---the number of chicks per diet is relatively low to produce this plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = cw, mapping = aes(x = Time, y = weight, color = Diet)) +\n  facet_wrap(vars(Diet)) +\n  geom_boxplot() +\n  theme(legend.position = \"none\") +\n  ggtitle(\"Changing distributions of chick weight by diet and elapsed time\")\n```\n\n::: {.cell-output-display}\n![](chart-basics_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n- Diet 3 seems to have the highest ‚Äúaverage‚Äù weight gain \n- Diet 4 seems to have the least amount of variation \n\n\n\n::: panel-tabset\n\n## Your turn\n\nTo the plot above, edit the axis labels using `xlab()` for the x-axis label and `ylab()` for the y-axis label. The labels should be, \n\n- x-axis: \"Time (days)\"\n- y-axis: ‚ÄúWeight (grams)‚Äù\n\n## Answer\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](chart-basics_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n:::\n\n\n## Scatterplot with mean line\n\nLet's finish with a plot that you might include in a publication\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = cw, mapping = aes(x = Time, y = weight, group = Diet, color = Diet)) +\n  facet_wrap(vars(Diet)) +\n  stat_summary(fun.y = \"mean\", geom = \"line\", colour= \"black\") +\n  geom_jitter() +\n  theme(legend.position = \"none\") +\n  ggtitle(\"Chick weight by diet and elapsed time\") +\n  xlab(\"Time (days)\") +\n  ylab(\"Weight (grams)\")\n```\n\n::: {.cell-output-display}\n![](chart-basics_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nNote that I printed the line layer first then printed the points over them to let the data be prominent. \n\n\n::: panel-tabset\n\n## Your turn\n\n- Read the help page for the `facet_wrap()` function \n- See if you can edit the code slightly to make the facets print out row-wise, as in 1 row and 4 columns of charts.  \n- What visual advantages does this arrangement provide?\n- What visual disadvantages? \n\n## Answer\n\n\n::: {.cell fig.asp='0.4'}\n::: {.cell-output-display}\n![](chart-basics_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n:::\n\n\n\n\n## References\n",
    "supporting": [
      "chart-basics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}