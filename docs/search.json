[
  {
    "objectID": "agenda.html",
    "href": "agenda.html",
    "title": "Agenda",
    "section": "",
    "text": "list of to-dos"
  },
  {
    "objectID": "already-installed.html",
    "href": "already-installed.html",
    "title": "Already installed",
    "section": "",
    "text": "To get the most out of the workshop, you should have the essential software installed and running several days before the workshop to give you time to contact us with questions if anything goes amiss.\nIf you are trying R for the first time, it is vital that you attempt to set up your computer with the necessary software in advance or it will be difficult to keep up."
  },
  {
    "objectID": "already-installed.html#already-installed",
    "href": "already-installed.html#already-installed",
    "title": "Already installed",
    "section": "Already installed?",
    "text": "Already installed?\nIf you do not have R and RStudio installed, please skip this section and start with the next section.\nIf you are already an R and RStudio user, this is a great time to check for updates.\nUpdating RStudio\n\nRStudio menu Help > Check for Updates will tell you if you are current or not.\nTo update, close RStudio on your machine, download the new version from the RStudio website, and run the RStudio-some-version-number.exe. (Windows users might have to run the executable as an administrator.)\n\nUpdate your packages\nHow to upgrade all out-of-date packages in What They Forgot to Teach You About R by Jennifer Bryan and Jim Hester.\nUpdating R\nThe easiest way to update R is to simply download the newest version. RStudio will automatically use the latest you’ve installed.\nAlternatively, Windows users can use the installr package:\n\nInstall the installr package\nIf open, close R and RStudio\nNavigate to your most recent Rgui.exe file located in your Programs directory, e.g., C:\\Program Files\\R\\R-4.0.0\\bin\\x64\\Rgui.exe\n\nRight-click on Rgui.exe and run as administrator\nIn the R GUI window that appears, run the commands\n\n    # Windows users only\n    library(\"installr\")\n    updateR()\nUpdating your R library\nHow to transfer your library when updating R also by Bryan and Hester. Requires the fs package."
  },
  {
    "objectID": "already-installed.html#new-to-r",
    "href": "already-installed.html#new-to-r",
    "title": "Already installed",
    "section": "New to R?",
    "text": "New to R?\nThis section is for anyone who has not yet installed R or RStudio.\nThe first steps are to install R and RStudio. Windows users may have to login as an Administrator before installing the software.\n\nInstall R for your operating system\n\nInstall RStudio, a user interface for R\n\nOnce the installation is complete, you can take a 2-minute tour of the RStudio interface.\n\nLet’s start (00:57–02:32) by R Ladies Sydney (RLadiesSydney:2018:Lesson1?)\n\nThe same video includes a longer (7 minute) tour of the four quadrants (panes) in RStudio if you are interested.\n\nThe RStudio quadrants (07:21–14:40) by R Ladies Sydney (RLadiesSydney:2018:Lesson1?)"
  },
  {
    "objectID": "before-you-arrive.html",
    "href": "before-you-arrive.html",
    "title": "Before you arrive",
    "section": "",
    "text": "To get the most out of the workshop, you should have the essential software installed and running several days before the workshop to give you time to contact us with questions if anything goes amiss.\nIf you are trying R for the first time, it is vital that you attempt to set up your computer with the necessary software in advance or it will be difficult to keep up.\nAs you work your way through this pre-workshop assignment, you will encounter R code chunks to type. Clicking the copy icon in the top right corner copies the code chunk to your clipboard, saving some typing time. For example:"
  },
  {
    "objectID": "before-you-arrive.html#already-use-r",
    "href": "before-you-arrive.html#already-use-r",
    "title": "Before you arrive",
    "section": "Already use R?",
    "text": "Already use R?\nIf you are already an R and RStudio user, this is a great time to check for updates.\nUpdating RStudio\n\nRStudio menu Help > Check for Updates will tell you if you are current or not.\nTo update, close RStudio on your machine, download the new version from the RStudio website, and run the RStudio-some-version-number.exe. (Windows users might have to run the executable as an administrator.)\n\nUpdate your packages\nHow to upgrade all out-of-date packages in What They Forgot to Teach You About R by Jennifer Bryan and Jim Hester.\nUpdating R\nThe easiest way to update R is to simply download the newest version. RStudio will automatically use the latest you’ve installed.\nAlternatively, Windows users can use the installr package:\n\nInstall the installr package\nIf open, close R and RStudio\nNavigate to your most recent Rgui.exe file located in your Programs directory, e.g., C:\\Program Files\\R\\R-4.0.0\\bin\\x64\\Rgui.exe\n\nRight-click on Rgui.exe and run as administrator\nIn the R GUI window that appears, run the commands\n\n    # Windows users only\n    library(\"installr\")\n    updateR()\nUpdating your R library\nHow to transfer your library when updating R also by Bryan and Hester. Requires the fs package."
  },
  {
    "objectID": "before-you-arrive.html#new-to-r",
    "href": "before-you-arrive.html#new-to-r",
    "title": "Before you arrive",
    "section": "New to R?",
    "text": "New to R?\nThis section is for anyone who has not yet installed R or RStudio.\nThe first steps are to install R and RStudio. Windows users may have to login as an Administrator before installing the software.\n\nInstall R for your operating system\n\nInstall RStudio, a user interface for R\n\nOnce the installation is complete, you can take a 2-minute tour of the RStudio interface.\n\nLet’s start (00:57–02:32) by R Ladies Sydney (RLadiesSydney:2018:Lesson1?)\n\nThe same video includes a longer (7 minute) tour of the four quadrants (panes) in RStudio if you are interested.\n\nThe RStudio quadrants (07:21–14:40) by R Ladies Sydney (RLadiesSydney:2018:Lesson1?)"
  },
  {
    "objectID": "before-you-arrive.html#start-the-homework",
    "href": "before-you-arrive.html#start-the-homework",
    "title": "Before you arrive",
    "section": "Start the homework",
    "text": "Start the homework\nOnce you have R and RStudio up and running on your system, we have a short set of setup instructions to help prepare you for the workshop R tutorials.\nWe start by creating an RStudio Project file and directory. You can recognize an R project file by its .Rproj suffix.\nIf you prefer your instructions with commentary,\n\nStart with a Project (02:34–04:50) by R Ladies Sydney (RLadiesSydney:2018:Lesson1?)\n\nIf you prefer basic written instructions,\n\nRStudio, File > New Project… > New Directory > New Project\nOr, click the New Project button in the Console ribbon,\n\n\nIn the dialog box that appears,\n\nType the workshop name as the directory name, for example, workshop, or if you like more detail, midfield-institute-2022\n\nUse the browse button to select a location on your computer to create the project folder\n\nClick the Create Project button\n\nWhenever you work with the workshop materials, launch the workshop.Rproj file (using the name you actually used) to start the session."
  },
  {
    "objectID": "before-you-arrive.html#add-some-folders",
    "href": "before-you-arrive.html#add-some-folders",
    "title": "Before you arrive",
    "section": "Add some folders",
    "text": "Add some folders\nWhile file organization is a matter of personal preference, we ask that you use the directory structure shown here for your work in the workshop. Assuming we called our project workshop, the minimal directory structure has three folders in it plus the .Rproj file at the top level.\n\\workshop\n    \\data\n    \\results\n    \\scripts\n    workshop.Rproj\nWe use the folders as follows:\n\ndata data files\nresults finished graphs and tabulated data formatted for display\n\nscripts R scripts that operate on data to produce results\n\nTo create folders:\n\nuse your usual method of creating new folders on your machine\nor you can use the New Folder button in the Files pane\n\n\nFor a video guide,\n\nMake some folders (04:50–06:08) by R Ladies Sydney (RLadiesSydney:2018:Lesson1?)"
  },
  {
    "objectID": "before-you-arrive.html#install-cran-packages",
    "href": "before-you-arrive.html#install-cran-packages",
    "title": "Before you arrive",
    "section": "Install CRAN packages",
    "text": "Install CRAN packages\nThe fundamental unit of shareable code in R is the package. For the R novice, an R package is like an “app” for R—a collection of functions, data, and documentation for doing work in R that is easily shared with others (wickham2014advanced?).\nMost packages are obtained from the CRAN website (cranweb?). To install a CRAN package using RStudio:\n\nLaunch RStudio\n\nThe RStudio interface has several panes. We want the Files/Plots/Packages pane.\n\nSelect the Packages tab\n\n\nNext,\n\nClick Install on the ribbon\nIn the dialog box, type the name of the package. For our first package, type data.table to install the data.table package (Dowle & Srinivasan, 2021)\nCheck the Install dependencies box\nClick the Install button\n\n\nDuring the installation, Windows users might get a warning message about Rtools, something like:\nWARNING: Rtools is required to build R packages but is not currently installed. Please download etc.\n\nRtools is needed for packages with C/C++/FORTRAN code from source—which does not apply to us. You may ignore the warning and carry on.\nIn the RStudio Console, you should see a message like this one,\npackage 'data.table' successfully unpacked and MD5 sums checked\nIf successful, the package will appear in the Packages pane, e.g.,\n\nRepeat the process for the following packages:\nggplot2\nsocviz\nAlternatively, you can install them all at once by typing in the Console:\npackages_we_use <- c(\"data.table\", \"ggplot2\", \"socviz\")\ninstall.packages(packages_we_use)"
  },
  {
    "objectID": "before-you-arrive.html#install-midfieldr",
    "href": "before-you-arrive.html#install-midfieldr",
    "title": "Before you arrive",
    "section": "Install midfieldr",
    "text": "Install midfieldr\nmidfieldr is not yet available from CRAN. To install the development version of midfieldr from its drat repository, type in the Console:\n# type in the RStudio Console \ninstall.packages(\"midfieldr\", \n                 repos = \"https://MIDFIELDR.github.io/drat/\", \n                 type = \"source\")\nYou can confirm a successful installation by running the following lines to bring up the package help page in the Help window.\n# type in the RStudio Console \nlibrary(\"midfieldr\")\n? `midfieldr-package`\n\n# or, equivalently\nhelp(\"midfieldr-package\")\nIf the installation is successful, the code chunk above should produce a view of the help page as shown here."
  },
  {
    "objectID": "before-you-arrive.html#install-midfielddata",
    "href": "before-you-arrive.html#install-midfielddata",
    "title": "Before you arrive",
    "section": "Install midfielddata",
    "text": "Install midfielddata\nBecause of its size, the data package is stored in a drat repository instead of CRAN. Installation takes time; please be patient and wait for the Console prompt “>” to reappear.\nType (or copy and paste) the following lines in the RStudio Console.\n# type in the RStudio Console  \ninstall.packages(\"midfielddata\", \n                 repos = \"https://MIDFIELDR.github.io/drat/\", \n                 type = \"source\")\n# be patient\nOnce the Console prompt “>” reappears, you can confirm a successful installation by viewing the package help page. In the Console, run:\n# type in the RStudio Console  \nlibrary(\"midfielddata\")\nhelp(\"midfielddata-package\")\nIf the installation is successful, the code chunk above should produce a view of the help page as shown here."
  },
  {
    "objectID": "before-you-arrive.html#finish-the-homework",
    "href": "before-you-arrive.html#finish-the-homework",
    "title": "Before you arrive",
    "section": "Finish the homework",
    "text": "Finish the homework\nAs a final task, save your open files and close RStudio.\nIf you get a prompt about saving your workspace image, the answer is No. \nYou can turn this prompt off by reopening RStudio and use the pulldown menu:\n\nTools > Global Options…\nIn the dialog box, Save workspace to .RData on exit: Select “Never”\n\nYou finished your homework!"
  },
  {
    "objectID": "chart-basics.html",
    "href": "chart-basics.html",
    "title": "R chart basics",
    "section": "",
    "text": "An introduction to ggplot2, an R package for creating charts of quantitative data, adapted and edited from (Bashir & Eddelbuettel, 2018) licensed under CC BY SA by ilustat."
  },
  {
    "objectID": "chart-basics.html#preface",
    "href": "chart-basics.html#preface",
    "title": "R chart basics",
    "section": "Preface",
    "text": "Preface\nBefore starting. Our tutorials assume that you\n\nHave completed the Before you arrive instructions\nHave completed the R basics guide\nStart your R session by launching the RStudio project you created, e.g., midfield-institute-2022.Rproj\n\nStart a new script. We recommend that you start a new script for this segment.\n\nUse File > New File > R Script to create a new R script\nFile > Save As… to name the file (we suggest 02-chart-basics.R), then save it to the scripts directory\nAt the top of the script, add a minimal header, something like:\n\n\n# Chart basics\n# R. Layton \n# 2022-06-07 \n\n\nUse library() to load packages used in the script.\n\n\n# silently load packages\nsuppressMessages(library(\"ggplot2\"))\nsuppressMessages(library(\"data.table\"))\n\n\nSave and run."
  },
  {
    "objectID": "chart-basics.html#data",
    "href": "chart-basics.html#data",
    "title": "R chart basics",
    "section": "Data",
    "text": "Data\nIntroduction. R comes with many datasets installed. We’ll use the ChickWeight data set to cover some basic data manipulation to prepare the data for graphing.\nThe help page for ChickWeight summarizes the experiment from which the data were collected,\n\nThe body weights of the chicks were measured at birth and every second day thereafter until day 20. They were also measured on day 21. There were four groups of chicks on different protein diets.”\n\nYou can view the help page by running,\nhelp(\"ChickWeight\")\nThere are 578 observations (rows) and 4 variables (columns). Recall that names are case-sensitive—weight is lowercase, the other variables are capitalized.\n\nChick: unique ID for each chick.\nDiet: one of four protein diets.\nTime: number of days since birth.\nweight: body weight of chick in grams.\n\nThe goal of graphing the data is to investigate the effect of diet on weight over time.\nDownload a CSV file. In the Before you arrive instructions, you were asked to create a data folder (directory) at the top level of your RStudio project.\nWe use fread() function from the data.table package to read the data set from the workshop repository (an Internet connection is required).\n# data URL\ndata_url <- \"https://raw.githubusercontent.com/MIDFIELDR/2022-midfield-institute/main/data/chick_weight.csv\"\n\n# download the data\nchick_weight <- fread(data_url)\n\n# write the data to your data directory\nfwrite(chick_weight, \"data/chick_weight.csv\")\nThese lines of code only have to be run once because from now on you’ll read the data from your local directory. Once run, the code chunk above can be commented out of your script, e.g.,\n\n# # data URL\n# data_url <- \"https://raw.githubusercontent.com/MIDFIELDR/2022-midfield-institute/main/data/chick_weight.csv\"\n# \n# # download the data\n# chick_weight <- fread(data_url)\n# \n# # write the data to your data directory\n# fwrite(chick_weight, \"data/chick_weight.csv\")\n\nRead a local CSV file. We import the data from the local file chick_weight.csv using fread(). This function returns a data.table object with a structure slightly different from the same data set built into R.\n\ncw <- fread(\"data/chick_weight.csv\")\n\nImportant note. If all goes well then the data is now in your environment in an R object called cw. If you get the following error message then you need to change the working directory to where the data is stored.\nError: 'chick_weight.csv' does not exist in current working directory ...\nChange the working directory in RStudio. First, confirm that you are working within the R project your set up for the workshop.\n\nIf you are in the project, the project name appears in the upper left corner of the RStudio window. If true, then from the RStudio menu, pull down Session > Set Working Directory > To Project Directory and run the script again.\nIf you are not in the project, navigate to the folder you created for the project and launch the midfield-institute-2022.Rproj file.\n\nIf that project does not exist, you can create it following the Before you arrive instructions.\n\nWhen a project is opened within RStudio,\n\nA new R session (process) is started.\nThe current working directory is set to the project directory, facilitating the use of relative file paths.\nOther RStudio settings are restored to where they were the last time the project was closed.\n\nLook at the data. To look at the data, type the object (dataset) name:\n\n# view the data\ncw\n#>      Chick Diet Time weight\n#>   1:    18    1    0     39\n#>   2:    18    1    2     35\n#>   3:    16    1    0     41\n#>   4:    16    1    2     45\n#>   5:    16    1    4     49\n#>  ---                       \n#> 574:    48    4   14    170\n#> 575:    48    4   16    222\n#> 576:    48    4   18    261\n#> 577:    48    4   20    303\n#> 578:    48    4   21    322\n\nSeveral base R functions help us inspect the data:\n\nstr() compactly displays the structure\nsummary() provides a summary\nhead() and tail() display the beginning and end of the data set\n\n\nstr(cw)\n#> Classes 'data.table' and 'data.frame':   578 obs. of  4 variables:\n#>  $ Chick : int  18 18 16 16 16 16 16 16 16 15 ...\n#>  $ Diet  : int  1 1 1 1 1 1 1 1 1 1 ...\n#>  $ Time  : int  0 2 0 2 4 6 8 10 12 0 ...\n#>  $ weight: int  39 35 41 45 49 51 57 51 54 41 ...\n#>  - attr(*, \".internal.selfref\")=<externalptr>\n\nThis shows that the dataset has 578 observations and 4 variables as expected. The str() output displays the variable types (here, all integers) and the first few values. The RStudio Environment pane provides a very similar view.\n\nsummary(cw)\n#>      Chick            Diet            Time           weight     \n#>  Min.   : 1.00   Min.   :1.000   Min.   : 0.00   Min.   : 35.0  \n#>  1st Qu.:13.00   1st Qu.:1.000   1st Qu.: 4.00   1st Qu.: 63.0  \n#>  Median :26.00   Median :2.000   Median :10.00   Median :103.0  \n#>  Mean   :25.75   Mean   :2.235   Mean   :10.72   Mean   :121.8  \n#>  3rd Qu.:38.00   3rd Qu.:3.000   3rd Qu.:16.00   3rd Qu.:163.8  \n#>  Max.   :50.00   Max.   :4.000   Max.   :21.00   Max.   :373.0\n\n\nYour turnAnswerYour turnAnswer\n\n\nUse tail() to examine the last observations in cw and compare to the last observations in the ChickWeight data set provided in base R.\nDo they agree? Describe the differences, if any.\n\n\nThe variables (columns) are the same but in different order. The observations (rows) are apparently in different order too.\n\n#>    Chick Diet Time weight\n#> 1:    48    4   12    154\n#> 2:    48    4   14    170\n#> 3:    48    4   16    222\n#> 4:    48    4   18    261\n#> 5:    48    4   20    303\n#> 6:    48    4   21    322\n#>     weight Time Chick Diet\n#> 573    155   12    50    4\n#> 574    175   14    50    4\n#> 575    205   16    50    4\n#> 576    234   18    50    4\n#> 577    264   20    50    4\n#> 578    264   21    50    4\n\nAlso, the row numbers in cw (a data.table) are different from the row numbers in ChickWeight.\n\n\nUse str() to compare cw to the original ChickWeight in base R.\nHow are they different?\n\n\ncw is a data.frame and a data.table object and the variables are all integers.\n\n#> Classes 'data.table' and 'data.frame':   578 obs. of  4 variables:\n#>  $ Chick : int  18 18 16 16 16 16 16 16 16 15 ...\n#>  $ Diet  : int  1 1 1 1 1 1 1 1 1 1 ...\n#>  $ Time  : int  0 2 0 2 4 6 8 10 12 0 ...\n#>  $ weight: int  39 35 41 45 49 51 57 51 54 41 ...\n#>  - attr(*, \".internal.selfref\")=<externalptr>\n\nChickWeight is a data.frame and a groupedData object (a type of ordered grouping). Two columns are integers but two are factors. We’ll discuss factors in due course.\n\n#> Classes 'nfnGroupedData', 'nfGroupedData', 'groupedData' and 'data.frame':   578 obs. of  4 variables:\n#>  $ weight: num  42 51 59 64 76 93 106 125 149 171 ...\n#>  $ Time  : num  0 2 4 6 8 10 12 14 16 18 ...\n#>  $ Chick : Ord.factor w/ 50 levels \"18\"<\"16\"<\"15\"<..: 15 15 15 15 15 15 15 15 15 15 ...\n#>  $ Diet  : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 1 1 1 1 1 1 1 1 1 ...\n#>  - attr(*, \"formula\")=Class 'formula'  language weight ~ Time | Chick\n#>   .. ..- attr(*, \".Environment\")=<environment: R_EmptyEnv> \n#>  - attr(*, \"outer\")=Class 'formula'  language ~Diet\n#>   .. ..- attr(*, \".Environment\")=<environment: R_EmptyEnv> \n#>  - attr(*, \"labels\")=List of 2\n#>   ..$ x: chr \"Time\"\n#>   ..$ y: chr \"Body weight\"\n#>  - attr(*, \"units\")=List of 2\n#>   ..$ x: chr \"(days)\"\n#>   ..$ y: chr \"(gm)\""
  },
  {
    "objectID": "chart-basics.html#scatterplot",
    "href": "chart-basics.html#scatterplot",
    "title": "R chart basics",
    "section": "Scatterplot",
    "text": "Scatterplot\nggplot2 package. We use the ggplot2 package to visualize the chick weight data. Our goal is to examine how weight changes over time conditioned by diet.\nDon’t worry too much about the details of the syntax. To learn more, try different things even if you get an error message. No harm is done!\nFirst plot. Let’s plot the weight data (y axis) as a function of time (x axis). The first plot is empty because there is no “geom” (a geometric object) to encode the data visually.\n\nggplot(data = cw, mapping = aes(x = Time, y = weight))\n\n\n\n\nNext we add the geom_point() layer to encode the data as points in a scatterplot.\n\nggplot(data = cw, mapping = aes(x = Time, y = weight)) + \n  geom_point()\n\n\n\n\n\nYour turnAnswer\n\n\nSwitch the variables Time and weight in the code chunk.\nWhat do you think of this new plot compared to the original?\n\n\nIn a time series, the visual convention (in Latin/Roman-descended societies) is for time to read from left to right, so this chart is not as intuitive as the earlier chart."
  },
  {
    "objectID": "chart-basics.html#add-a-category",
    "href": "chart-basics.html#add-a-category",
    "title": "R chart basics",
    "section": "Add a category",
    "text": "Add a category\nAdd color for Diet. The graph does not differentiate between the diets. Essentially we use color to encode a third variable, Diet, a categorical variable. One important thing to notice is that all arguments being “mapped” must be names of variables in the cw data frame.\n\nggplot(data = cw, mapping = aes(x = Time, y = weight, color = factor(Diet))) +\n  geom_point()\n\n\n\n\nIt is difficult to conclude anything from this graph as the points are printed on top of one another (with diet 1 underneath and diet 4 at the top)."
  },
  {
    "objectID": "chart-basics.html#faceted-chart",
    "href": "chart-basics.html#faceted-chart",
    "title": "R chart basics",
    "section": "Faceted chart",
    "text": "Faceted chart\nFactor variables. Before we continue, we make an important change to the cw dataset by making Diet and Time factor variables. This means that R will treat them as categorical variables instead of continuous variables. It will simplify our coding.\n\n# create factors using data.table syntax\ncw[, Diet := factor(Diet)]\ncw[, Time := factor(Time)]\n\n# notice the difference ?\nsummary(cw) \n#>      Chick       Diet         Time         weight     \n#>  Min.   : 1.00   1:220   0      : 50   Min.   : 35.0  \n#>  1st Qu.:13.00   2:120   2      : 50   1st Qu.: 63.0  \n#>  Median :26.00   3:120   4      : 49   Median :103.0  \n#>  Mean   :25.75   4:118   6      : 49   Mean   :121.8  \n#>  3rd Qu.:38.00           8      : 49   3rd Qu.:163.8  \n#>  Max.   :50.00           10     : 49   Max.   :373.0  \n#>                          (Other):282\n\nThe := operator altered the variables “in-place”, and no explicit assignment was made. This is a key feature of data.table which operated “by reference”: changes are made in reference to one instance of the cw variable, rather than by creating updated copies. We revisit the := operator below.\nfacet_wrap() function. facet_wrap() is a ggplot2 function that plots variables in separate facets, or panels. In this case, each facet contains one of the four diets.\n\n# create facets by Diet \nggplot(data = cw, mapping = aes(x = Time, y = weight, color = Diet)) +\n  geom_point() +\n  facet_wrap(vars(Diet)) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\nYour turnAnswerYour turnAnswer\n\n\n\nTo address “overprinting” (where points print over other points in the same position), replace geom_point() with geom_jitter().\nWhat observations about the data can you make?\n\n\n\n\n\n\n\n\n\nJittering allows a much better view of the full data set.\nDiet 4 has the least variability.\nDiet 3 seems to have the highest weights.\nWe can’t really say anything about the mean effect of each diet.\n\n\n\nFor the legend.position argument, try using “top”, “left” and “none”.\nDo we really need a legend for this plot?\n\n\n\n\n\n\n\nHere, the legend.position argument is “none”. The diet types are in the panel headers, so a legend is unnecessary."
  },
  {
    "objectID": "chart-basics.html#mean-line-chart",
    "href": "chart-basics.html#mean-line-chart",
    "title": "R chart basics",
    "section": "Mean line chart",
    "text": "Mean line chart\nNext we plot the mean changes over time for each diet using the stat_summary() function. Because we do not have facets this time, we use the default legend.\n\nggplot(data = cw, mapping = aes(x = Time, y = weight, group = Diet, color = Diet)) +\n  stat_summary(fun.y = \"mean\", geom = \"line\")\n\n\n\n\nWe see that diet 3 has the highest mean weight gain by the end of the experiment but we don’t have any information about the variation (uncertainty) in the data.\n\nYour turnAnswer\n\n\n\nWhat happens when you add geom_point() to the plot above? Don’t forget the +.\nDoes it make a difference if you put it before or after stat_summary(...)?\nHint: Look carefully at how the graph is plotted.\n\n\n\n\n\n\n\n\n\nThe chart is the same either way.\nThe underlying idea in ggplot2 is that a chart is assembled in layers, adding a new layer to previous layers using the + operator."
  },
  {
    "objectID": "chart-basics.html#box-whisker-plot",
    "href": "chart-basics.html#box-whisker-plot",
    "title": "R chart basics",
    "section": "Box & whisker plot",
    "text": "Box & whisker plot\nTo see variation between the different diets we use geom_boxplot() to plot a box & whisker plot. A note of caution—the number of chicks per diet is relatively low to produce this plot.\n\nggplot(data = cw, mapping = aes(x = Time, y = weight, color = Diet)) +\n  facet_wrap(vars(Diet)) +\n  geom_boxplot() +\n  theme(legend.position = \"none\") +\n  ggtitle(\"Changing distributions of chick weight by diet and elapsed time\")\n\n\n\n\n\nDiet 3 seems to have the highest “average” weight gain\nDiet 4 seems to have the least amount of variation\n\n\nYour turnAnswer\n\n\nTo the plot above, edit the axis labels using xlab() for the x-axis label and ylab() for the y-axis label. The labels should be,\n\nx-axis: “Time (days)”\ny-axis: “Weight (grams)”"
  },
  {
    "objectID": "chart-basics.html#scatterplot-with-mean-line",
    "href": "chart-basics.html#scatterplot-with-mean-line",
    "title": "R chart basics",
    "section": "Scatterplot with mean line",
    "text": "Scatterplot with mean line\nLet’s finish with a plot that you might include in a publication\n\nggplot(data = cw, mapping = aes(x = Time, y = weight, group = Diet, color = Diet)) +\n  facet_wrap(vars(Diet)) +\n  stat_summary(fun.y = \"mean\", geom = \"line\", colour= \"black\") +\n  geom_jitter() +\n  theme(legend.position = \"none\") +\n  ggtitle(\"Chick weight by diet and elapsed time\") +\n  xlab(\"Time (days)\") +\n  ylab(\"Weight (grams)\")\n\n\n\n\nNote that I printed the line layer first then printed the points over them to let the data be prominent.\n\nYour turnAnswer\n\n\n\nRead the help page for the facet_wrap() function\nSee if you can edit the code slightly to make the facets print out row-wise, as in 1 row and 4 columns of charts.\n\nWhat visual advantages does this arrangement provide?\nWhat visual disadvantages?"
  },
  {
    "objectID": "data-basics.html",
    "href": "data-basics.html",
    "title": "Data basics",
    "section": "",
    "text": "An introduction to manipulating data in R."
  },
  {
    "objectID": "data-basics.html#prerequisites",
    "href": "data-basics.html#prerequisites",
    "title": "Data basics",
    "section": "Prerequisites",
    "text": "Prerequisites\nInstitute tutorials assume that you have:\n\nCompleted the Before you arrive instructions\n\nStarted your R session by launching the RStudio project you created, for example, midfield-institute-2022.Rproj"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "We welcome faculty, staff, and graduate students.\nOur learning objectives can be categorized in two broad classes: qualitative and computational. Qualitatively, by the end of the workshop participants should be able to:\n\nDescribe the data available in MIDFIELD\n\nDescribe how the MIDFIELD data are organized\n\nDescribe key principles of effective data visualization\n\nComputationally, participants should be able use midfieldr, an R package specifically designed for use with MIDFIELD, to:\n\nSubset MIDFIELD data to obtain a population to study\n\nClassify the student records by desired groupings\n\nSummarize the data by groups and display results"
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "The Multiple-Institution Database for Investigating Longitudinal Development (MIDFIELD) is a partnership of higher education institutions with engineering programs. Begun in 2004 as an extension of the SUCCEED Longitudinal Database, MIDFIELD contains Student Unit Record (SUR) data for all undergraduate, degree-seeking students at the partner institutions.\nAs of June 1, 2022, MIDFIELD contains SUR data for 1.7 M undergraduates at 19 US institutions."
  },
  {
    "objectID": "introduction.html#about-midfield",
    "href": "introduction.html#about-midfield",
    "title": "Introduction",
    "section": "About MIDFIELD",
    "text": "About MIDFIELD\nThe Multiple-Institution Database for Investigating Longitudinal Development (MIDFIELD) is a partnership of higher education institutions with engineering programs. Begun in 2004 as an extension of the SUCCEED Longitudinal Database, MIDFIELD contains Student Unit Record (SUR) data for all undergraduate, degree-seeking students at the partner institutions.\nAs of June 1, 2022, MIDFIELD contains SUR data for 1.7 M undergraduates at 19 US institutions."
  },
  {
    "objectID": "introduction.html#facilitators",
    "href": "introduction.html#facilitators",
    "title": "Introduction",
    "section": "Facilitators",
    "text": "Facilitators\n\nSusan Lord\n\nDirector of the MIDFIELD Institute and Professor and Chair of Integrated Engineering at the University of San Diego. She is a Fellow of the IEEE and the ASEE. Dr. Lord has considerable experience facilitating workshops including the National Effective Teaching Institute (NETI) and special sessions at FIE. (slord@sandiego.edu)\n\nMatthew Ohland\n\nMIDFIELD Director and Principal Investigator. He is Professor and Associate Head of Engineering Education at Purdue University and a Fellow of IEEE, ASEE, and AAAS. Dr. Ohland has considerable experience facilitating workshops including the NETI and CATME training. (ohland@purdue.edu)\n\nMarisa Orr\n\nMIDFIELD Associate Director and Associate Professor in Engineering and Science Education with a joint appointment in Mechanical Engineering at Clemson University. She received the 2009 Helen Plants Award for the best nontraditional session at FIE, “Enhancing Student Learning Using SCALE-UP Format.” (marisak@clemson.edu)\n\nRussell Long\n\nMIDFIELD Managing Director and Data Steward. He developed the stratified data sample for the R packages used in this workshop. Mr. Long is a SAS expert with over twenty years of experience in institutional research and assessment. (ralong@purdue.edu)\n\nRichard Layton\n\nMIDFIELD Data Visualization Specialist and Professor Emeritus, Rose-Hulman Institute of Technology. He is the lead developer of the R packages used with the MIDFIELD practice data sets and the associated tutorials and workshop activities. (graphdoctor@gmail.com)"
  },
  {
    "objectID": "introduction.html#publications",
    "href": "introduction.html#publications",
    "title": "Introduction",
    "section": "Publications",
    "text": "Publications\nThe MIDFIELD team has been exploring and presenting the stories in the MIDFIELD data for over 10 years. To see a sample of our work, you can follow these links:\n\nLord SM, Ohland MW, Layton RA, and Camacho MM (2019) Beyond pipeline and pathways: Ecosystem metrics. Journal of Engineering Education, 108, 32–56,\n\nLord SM, Layton RA, and Ohland MW (2015) Multi-Institution study of student demographics and outcomes in Electrical and Computer Engineering in the USA, IEEE Transactions on Education, 58(3), 141–150.\n\nBrawner CE, Lord SM, Layton RA, Ohland MW, and Long RA (2015) Factors affecting women’s persistence in chemical engineering, International Journal of Engineering Education 31(6A), 1431–1447.\n\nLink to a comprehensive list of publications by researchers using MIDFIELD."
  },
  {
    "objectID": "introduction.html#acknowledgements",
    "href": "introduction.html#acknowledgements",
    "title": "Introduction",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nFunding provided by the National Science Foundation Grant 1545667 “Expanding Access to and Participation in the Multiple-Institution Database for Investigating Engineering Longitudinal Development.”"
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "Open source licenses",
    "section": "",
    "text": "CC-BY 4.0 for text.\n\nGPL-3 for code.\n\nCC0 for data."
  },
  {
    "objectID": "new-to-R.html",
    "href": "new-to-R.html",
    "title": "New to R",
    "section": "",
    "text": "To get the most out of the workshop, you should have the essential software installed and running several days before the workshop to give you time to contact us with questions if anything goes amiss.\nIf you are trying R for the first time, it is vital that you attempt to set up your computer with the necessary software in advance or it will be difficult to keep up."
  },
  {
    "objectID": "new-to-R.html#already-installed",
    "href": "new-to-R.html#already-installed",
    "title": "New to R",
    "section": "Already installed?",
    "text": "Already installed?\nIf you do not have R and RStudio installed, please skip this section and start with the next section.\nIf you are already an R and RStudio user, this is a great time to check for updates.\nUpdating RStudio\n\nRStudio menu Help > Check for Updates will tell you if you are current or not.\nTo update, close RStudio on your machine, download the new version from the RStudio website, and run the RStudio-some-version-number.exe. (Windows users might have to run the executable as an administrator.)\n\nUpdate your packages\nHow to upgrade all out-of-date packages in What They Forgot to Teach You About R by Jennifer Bryan and Jim Hester.\nUpdating R\nThe easiest way to update R is to simply download the newest version. RStudio will automatically use the latest you’ve installed.\nAlternatively, Windows users can use the installr package:\n\nInstall the installr package\nIf open, close R and RStudio\nNavigate to your most recent Rgui.exe file located in your Programs directory, e.g., C:\\Program Files\\R\\R-4.0.0\\bin\\x64\\Rgui.exe\n\nRight-click on Rgui.exe and run as administrator\nIn the R GUI window that appears, run the commands\n\n    # Windows users only\n    library(\"installr\")\n    updateR()\nUpdating your R library\nHow to transfer your library when updating R also by Bryan and Hester. Requires the fs package."
  },
  {
    "objectID": "new-to-R.html#install-r-and-rstudio",
    "href": "new-to-R.html#install-r-and-rstudio",
    "title": "New to R",
    "section": "Install R and RStudio",
    "text": "Install R and RStudio\nThis section is for anyone who has not yet installed R or RStudio.\nThe first steps are to install R and RStudio. Windows users may have to login as an Administrator before installing the software.\n\nInstall R for your operating system\n\nInstall RStudio, a user interface for R\n\nOnce the installation is complete, you can take a 2-minute tour of the RStudio interface.\n\nLet’s start (00:57–02:32) by R Ladies Sydney (RLadiesSydney:2018:Lesson1?)\n\nThe same video includes a longer (7 minute) tour of the four quadrants (panes) in RStudio if you are interested.\n\nThe RStudio quadrants (07:21–14:40) by R Ladies Sydney (RLadiesSydney:2018:Lesson1?)"
  },
  {
    "objectID": "r-basics-old.html",
    "href": "r-basics-old.html",
    "title": "R basics",
    "section": "",
    "text": "An introduction to R—a free software environment for statistical computing and graphics."
  },
  {
    "objectID": "r-basics-old.html#prerequisites",
    "href": "r-basics-old.html#prerequisites",
    "title": "R basics",
    "section": "Prerequisites",
    "text": "Prerequisites\nOur tutorials assume that you\n\nHave completed the Before you arrive instructions\n\nStart your R session by launching the RStudio project you created, e.g., midfield-institute-2022.Rproj"
  },
  {
    "objectID": "r-basics-old.html#scripts",
    "href": "r-basics-old.html#scripts",
    "title": "R basics",
    "section": "Scripts",
    "text": "Scripts\nWe recommend that you write your lines of code in a script. Scripts can saved, edited, and run again and again.\n\nUse File > New File > R Script to create a new R script\nFile > Save As… to name the file (we suggest 01-R-basics.R), then save it to the scripts directory\nAt the top of the script, add a minimal header, something like:\n\n\n# R basics tutorial\n# R. Layton \n# 2022-06-07 \n\nThe hash symbol # denotes a comment in R, that is, a line that isn’t run. Comments are annotations to make the source code easier for humans to understand but are ignored by R.\nIn code chunks like the one above you should see a “Copy to clipboard” icon in the upper right corner. Clicking on the icon copies the code chunk to your clipboard and you can paste it into your R script and edit as needed.\nNext,\n\nUse library() to load packages used in the script.\n\n\n# packages\nlibrary(\"midfieldr\")\nlibrary(\"ggplot2\")\n\nRun the script by clicking the Source button. Alternatively, you can use the keyboard shortcuts ctrl A (MacOS cmd A) to select all lines then ctrl Enter (MacOS cmd Return) to run all lines. (See the appendices for a table of useful keyboard shortcuts.)\nIf you see an error like this one,\n    Error in library(\"ggplot2\"): there is no package called 'ggplot2'\nthen you should install the missing package(s) and run the script again. You can review how to install a package here.\nUse your script throughout the tutorial. When a new chunk of code is given,\n\nCopy the line(s) of code into your script, save, and run.\n\nCheck your result by comparing it to the result in the tutorial.\nCheck what you’ve learned using the Your turn exercises."
  },
  {
    "objectID": "r-basics-old.html#names",
    "href": "r-basics-old.html#names",
    "title": "R basics",
    "section": "Names",
    "text": "Names\nEverything in R has a name.\n\nnamed entities, like x or y\n\ndata you have loaded, like my_data\nfunctions you use, like cos()\n\nSome names are forbidden\n\nreserved words, like TRUE or FALSE\n\nprogramming words, like Inf, for, else, and function\n\nspecial entities, like NA and NaN\n\nAvoid naming an object with the name of an already existing function, e.g.,\n\nq() quit\nc() combine or concatenate\nmean()\nrange()\n\nNames in R are case-sensitive\n\nmy_data and my_Data are different objects\nWe use “snake-case” for naming objects, that is, lowercase letters, numbers, and underscores (_) to separate words within a name.\n\nIf you want to know if a name is in use, in the RStudio console type a question mark followed by the name, e.g.,\n\n? c()\n? mean()\n\nIf the name is in use, a help page appears in the RStudio Help pane."
  },
  {
    "objectID": "r-basics-old.html#objects",
    "href": "r-basics-old.html#objects",
    "title": "R basics",
    "section": "Objects",
    "text": "Objects\nEverything in R is an object.\n\nSome objects are built in to R\nSome objects are loaded with packages\nSome objects are created by you\n\nType this line of code in your script, save, and run. c() is the function to combine or concatenate its elements to create a vector.\n\n# a numerical vector\nc(1, 2, 3, 1, 3, 25)\n\nIn these notes, everything that comes back to us in the Console as the result of running a script is shown prefaced by #>. For example, after running your script, the Console should show,\n\n\n#> [1]  1  2  3  1  3 25\n\n\nThe [1] printed here is a row label—we’ll come back to that.\nYou create an object and assign it to a name using the assignment operator (<-). The keyboard shortcut is alt – (MacOS option –).\n\n# assigning and object to a name\n# \nx <- c(1, 2, 3, 1, 3, 25)\ny <- c(5, 31, 71, 1, 3, 21, 6)\n\nTo see the object assigned to a name, type the name in the script, save, and run, e.g.,\n\n# display objects by name\nx\n#> [1]  1  2  3  1  3 25\n\ny\n#> [1]  5 31 71  1  3 21  6\n\nObjects in your R project workspace are listed in the RStudio Environment pane.\n\nDatasets are also named objects, and a large number of datasets are included in the base R installation. For example,state.area is a vector of the areas (in square miles) of the 50 US states.\nType into your script, save, and run.\n\n# data set bundled with R\nstate.area\n\n\nNow you can see how the row labels work. In this example, there are 10 numbers per row, so the second rows starts with [11], the third with [21], etc.\n\nIn the Console, type ? state.area to see the help page for the data set. The “Details” section of the help page notes that data are arranged in alphabetical order of the state names.\n\nSubsets of a vector are obtained using square bracket ([]) notation. For example, the first five areas are extracted with,\n\n# subset elements 1 through 5\nstate.area[1:5]\n\n#> [1]  51609 589757 113909  53104 158693\n\n\nThe 5th element alone,\n\n# subset element 5\nstate.area[5]\n\n#> [1] 158693"
  },
  {
    "objectID": "r-basics-old.html#functions",
    "href": "r-basics-old.html#functions",
    "title": "R basics",
    "section": "Functions",
    "text": "Functions\nYou do useful things in R with functions.\n\nfunctions are objects the perform actions for you\nfunctions produce output based on the input it receives\nfunctions are recognized by the parentheses at the end of their names\n\nThe parentheses are where we include the inputs (arguments) to the function.\n\nc() concatenates the comma-separated numbers to create a vector\nmean() computes the mean of a vector of numbers\nsd() computes the standard deviation of a vector of numbers\nsummary() returns a summary of the object\n\nIf we try mean() with no inputs, we get an error statement.\nmean()\n#> Error in mean.default() : argument \"x\" is missing, with no default\nIf we use the state.area data as the argument, the function is computed and displayed. Add these lines to your script, save, and run.\n\n# mean\nmean(state.area)\n\n#> [1] 72367.98\n\n# standard deviation\nsd(state.area)\n\n#> [1] 88278.01\n\n# object summary\nsummary(state.area)\n\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>    1214   37317   56222   72368   83234  589757\n\n\nWe can extract subsets of data using functions. For example, the US state abbreviations are available in the state.abb data set that comes with R. If we wanted every other state area up to the first 10 states, we use c() function to create a vector of indices to the desired elements,\n\n# subset a vector using specified indices\nstate.abb[c(2, 4, 6, 8, 10)]\n\n#> [1] \"AK\" \"AR\" \"CO\" \"DE\" \"GA\"\n\n\nIf we wanted every 5th entry over the full data set, we use the length() function to determine how many entries there are, and the sequence function seq() to create the vector of indices,\n\n# vector length\nn <- length(state.abb)\n\n# subset a vector using a sequence of indices\nstate.abb[seq(from = 5, to = n, by = 5)]\n\n#>  [1] \"CA\" \"GA\" \"IA\" \"MD\" \"MO\" \"NJ\" \"OH\" \"SC\" \"VT\" \"WY\""
  },
  {
    "objectID": "r-basics-old.html#packages",
    "href": "r-basics-old.html#packages",
    "title": "R basics",
    "section": "Packages",
    "text": "Packages\nThe basic R installation includes many functions. R packages provide specialized functions.\n\nFamilies of useful functions are bundled into packages that you can install, load, and use\nPackages allow you to build on the work of others\nYou can also write your own functions and packages\n\nA lot of the work in data science consists of choosing the right functions and giving them the right arguments to get our data into the form we need for analysis or visualization\n\nFunctions operate on the input you provide and give you back a result. Type the following in your script, save, and run.\n\nx        # the x vector from earlier\n\n#> [1]  1  2  3  1  3 25\n\ntable(x) # the frequency that numbers appear in x\n\n#> x\n#>  1  2  3 25 \n#>  2  1  2  1\n\ny        # the y vector from earlier \n\n#> [1]  5 31 71  1  3 21  6\n\nsd(y)    # standard deviation\n\n#> [1] 25.14435\n\nx * 5    # multiply every element by a scalar\n\n#> [1]   5  10  15   5  15 125\n\ny + 1    # add a scalar to every element\n\n#> [1]  6 32 72  2  4 22  7\n\nx + x    # add elements of vectors of equal length\n\n#> [1]  2  4  6  2  6 50\n\n\nTo see a list of functions and data sets bundled in a package, use the ls() function, e,g,\n\nls(\"package:midfieldr\")\n\n#>  [1] \"add_completion_timely\" \"add_data_sufficiency\"  \"add_institution\"      \n#>  [4] \"add_race_sex\"          \"add_timely_term\"       \"cip\"                  \n#>  [7] \"condition_fye\"         \"condition_multiway\"    \"filter_match\"         \n#> [10] \"filter_search\"         \"fye_start\"             \"study_grad_rate\"      \n#> [13] \"study_program\"         \"study_stickiness\"      \"study_student\"        \n#> [16] \"toy_course\"            \"toy_degree\"            \"toy_student\"          \n#> [19] \"toy_term\"\n\n\nAlternatively, in RStudio select the Packages tab and in its menu bar type the package name in the search box. In the pane, click on the package name. A help page opens listing all the functions and names of data sets in the package, e.g.,"
  },
  {
    "objectID": "r-basics-old.html#classes",
    "href": "r-basics-old.html#classes",
    "title": "R basics",
    "section": "Classes",
    "text": "Classes\nEverything in R has class.\n\nclass(x)\n\n#> [1] \"numeric\"\n\nclass(summary)\n\n#> [1] \"function\"\n\n\nCertain actions will change the class of an object. Suppose we try create a vector from the x object and a text string,\n\nnew_vector <- c(x, \"Apple\")\nnew_vector\n\n#> [1] \"1\"     \"2\"     \"3\"     \"1\"     \"3\"     \"25\"    \"Apple\"\n\nclass(new_vector)\n\n#> [1] \"character\"\n\n\nBy adding the word “Apple” to the vector, R changed the class from “numeric” to “character”. All the numbers are enclosed in quotes: they are now character strings and cannot be used in calculations.\nThe most common class of data object we will use is the data frame: a two-dimensional array of rows and columns in R. All values in a column are of the same type (numerical, character, logical, etc.) but columns can be of different types.\nFor example, the data frame study_grad_rate that is bundled with midfieldr has two character columns and one numerical column.\n\n# a data frame bundled with midfieldr\nstudy_grad_rate\n\n#>        program               race_sex grad_rate\n#>  1:      Civil           Asian Female      57.5\n#>  2:      Civil             Asian Male      58.5\n#>  3:      Civil           Black Female      36.8\n#>  4:      Civil             Black Male      35.2\n#>  5:      Civil Hispanic/Latinx Female      53.9\n#>  6:      Civil   Hispanic/Latinx Male      52.2\n#>  7:      Civil           White Female      61.2\n#>  8:      Civil             White Male      59.8\n#>  9: Electrical           Asian Female      55.3\n#> 10: Electrical             Asian Male      56.3\n#> 11: Electrical           Black Female      42.6\n#> 12: Electrical             Black Male      38.8\n#> 13: Electrical Hispanic/Latinx Female      50.6\n#> 14: Electrical   Hispanic/Latinx Male      45.2\n#> 15: Electrical           White Female      48.0\n#> 16: Electrical             White Male      46.4\n#> 17: Industrial           Asian Female      62.8\n#> 18: Industrial             Asian Male      60.9\n#> 19: Industrial           Black Female      56.9\n#> 20: Industrial             Black Male      44.2\n#> 21: Industrial Hispanic/Latinx Female      76.3\n#> 22: Industrial   Hispanic/Latinx Male      68.3\n#> 23: Industrial           White Female      65.9\n#> 24: Industrial             White Male      59.6\n#> 25: Mechanical           Asian Female      59.1\n#> 26: Mechanical             Asian Male      55.4\n#> 27: Mechanical           Black Female      51.7\n#> 28: Mechanical             Black Male      41.6\n#> 29: Mechanical Hispanic/Latinx Female      52.0\n#> 30: Mechanical   Hispanic/Latinx Male      44.9\n#> 31: Mechanical           White Female      56.1\n#> 32: Mechanical             White Male      55.8\n#>        program               race_sex grad_rate\n\nclass(study_grad_rate)\n\n#> [1] \"data.table\" \"data.frame\"\n\n\nThe class() function reveals that this data.frame object is also a data.table object, which is an enhanced version of R’s standard data frame. We won’t dwell on the enhancements at this early stage, but they are handy for faster data manipulation with large data sets (e.g. 100GB in RAM).\nYou can select a variable from a data frame using the $ operator, yielding a vector of values,\n\nstudy_grad_rate$program\n\n#>  [1] \"Civil\"      \"Civil\"      \"Civil\"      \"Civil\"      \"Civil\"     \n#>  [6] \"Civil\"      \"Civil\"      \"Civil\"      \"Electrical\" \"Electrical\"\n#> [11] \"Electrical\" \"Electrical\" \"Electrical\" \"Electrical\" \"Electrical\"\n#> [16] \"Electrical\" \"Industrial\" \"Industrial\" \"Industrial\" \"Industrial\"\n#> [21] \"Industrial\" \"Industrial\" \"Industrial\" \"Industrial\" \"Mechanical\"\n#> [26] \"Mechanical\" \"Mechanical\" \"Mechanical\" \"Mechanical\" \"Mechanical\"\n#> [31] \"Mechanical\" \"Mechanical\"\n\nstudy_grad_rate$grad_rate\n\n#>  [1] 57.5 58.5 36.8 35.2 53.9 52.2 61.2 59.8 55.3 56.3 42.6 38.8 50.6 45.2 48.0\n#> [16] 46.4 62.8 60.9 56.9 44.2 76.3 68.3 65.9 59.6 59.1 55.4 51.7 41.6 52.0 44.9\n#> [31] 56.1 55.8\n\n\n\nYour turnAnswerYour turnAnswer\n\n\nDetermine the class of the following midfieldr objects:\n\nadd_institution\ntoy_student\n\n\n\n\n\n#> [1] \"function\"\n\n\n#> [1] \"data.table\" \"data.frame\"\n\n\n\n\nUse the toy_term data frame in midfieldr. Determine:\n\nthe names of the variables (columns)\nthe average number of hours per term (use $ and mean())\n\n\n\n\n\n#> [1] \"mcid\"        \"institution\" \"term\"        \"cip6\"        \"level\"      \n#> [6] \"hours_term\"\n\n\n#> [1] 12.94675"
  },
  {
    "objectID": "r-basics-old.html#structures",
    "href": "r-basics-old.html#structures",
    "title": "R basics",
    "section": "Structures",
    "text": "Structures\nEverything in R has structure.\nWe can use the str() function to display the structure of the data frame, including its variable types and dimensions.\n\nstr(study_grad_rate)\n\n#> Classes 'data.table' and 'data.frame':   32 obs. of  3 variables:\n#>  $ program  : chr  \"Civil\" \"Civil\" \"Civil\" \"Civil\" ...\n#>  $ race_sex : chr  \"Asian Female\" \"Asian Male\" \"Black Female\" \"Black Male\" ...\n#>  $ grad_rate: num  57.5 58.5 36.8 35.2 53.9 52.2 61.2 59.8 55.3 56.3 ...\n#>  - attr(*, \".internal.selfref\")=<externalptr>\n\n\nThe str() function can be applied to any R object,\n\n# character vector\nstr(new_vector)\n\n#>  chr [1:7] \"1\" \"2\" \"3\" \"1\" \"3\" \"25\" \"Apple\"\n\n# numerical vector\nstr(study_grad_rate$grad_rate)\n\n#>  num [1:32] 57.5 58.5 36.8 35.2 53.9 52.2 61.2 59.8 55.3 56.3 ...\n\n# function \nstr(str)\n\n#> function (object, ...)\n\n\nWhen applied to a function, str() also displays the arguments of the function. For example, applying str() to the sd function yields,\n\nstr(sd)\n\n#> function (x, na.rm = FALSE)\n\n\nThus sd() is a function that has an argument x, where x is an R object, and a second argument na.rm = FALSE. To learn more, view the function’s help page by running ? sd().\n\nYour turnAnswer\n\n\nUse str() to determine\n\nadd_institution arguments\ntoy_student dimensions\ntoy_term numerical variables\n\n\n\n\ndframe, midfield_term\n100 rows x 6 columns\nhours_term"
  },
  {
    "objectID": "r-basics-old.html#mistakes",
    "href": "r-basics-old.html#mistakes",
    "title": "R basics",
    "section": "Mistakes",
    "text": "Mistakes\nExpect to make errors and don’t worry when that happens. You won’t break anything.\nHealy (Healy:2019?) offers this advice for three specific things to watch out for:\n\nMake sure parentheses are balanced—that every opening ( has a corresponding closing ).\n\nMake sure you complete your expressions. If you see a + in the Console instead of the usual prompt >, that means that R thinks you haven’t written a complete expression. You can hit Esc or CTRL-C to force your way back to the Console and try correcting the code.\n\nIn ggplot specifically, as you will see, we create plots layer by layer, using a + character at the end of the line—not at the beginning of the next line.\n\nFor example, you would write this,\nggplot(data = mpg, aes(x = displ, y = hwy)) +\n    geom_point()\nnot this,\n# error caused by incorrectly placed +\nggplot(data = mpg, aes(x = displ, y = hwy))  \n    + geom_point()\nTo conclude, let’s graph the study_grad_rate data. Don’t worry about the syntax just yet, we cover graph basics in the next tutorial.\n\nggplot(data = study_grad_rate, mapping = aes(x = grad_rate, y = program)) +\n  facet_wrap(vars(race_sex), ncol = 4) +\n  geom_point()\n\n\n\n\n\nYour turnAnswer\n\n\nThe code chunk above that creates the chart is written to group the facets of the chart by the race-ethnicity-sex column of the study_grad_rate data frame.\nMake small changes to the code to create a new chart such that the panels are grouped by the engineering program and the race-ethnicity-sex variable inhabits the rows along the vertical scale."
  },
  {
    "objectID": "r-basics-old.html#keyboard-shortcuts",
    "href": "r-basics-old.html#keyboard-shortcuts",
    "title": "R basics",
    "section": "Keyboard shortcuts",
    "text": "Keyboard shortcuts\n\nIf you are working in RStudio, you can see the menu of keyboard shortcuts using the menu Tools > Keyboard Shortcuts Help.\nThe shortcuts we use regularly include\n\n\n\n\n\nWindows / Linux\nAction\nMac OS\n\n\n\n\nctrl shift K\nCompile R Markdown document\ncmd shift K\n\n\nctrl L\nClear the RStudio Console\nctrl L\n\n\nctrl shift C\nComment/uncomment line(s)\ncmd shift C\n\n\nctrl X, C, V\nCut, copy, paste\ncmd X, C, V\n\n\nctrl F\nFind in text\ncmd F\n\n\nctrl I\nIndent or re-indent lines od code\ncmd I\n\n\nalt –\nInsert the assignment operator <-\noption –\n\n\nctrl alt B\nRun from begining to line\ncmd option B\n\n\nctrl alt E\nRun from line to end\ncmd option E\n\n\nctrl Enter\nRun selected line(s)\ncmd Return\n\n\nctrl S\nSave\ncmd S\n\n\nctrl A\nSelect all text\ncmd A\n\n\nctrl Z\nUndo\ncmd Z"
  },
  {
    "objectID": "r-basics.html",
    "href": "r-basics.html",
    "title": "R basics",
    "section": "",
    "text": "This guide is adapted and edited from (Bashir & Eddelbuettel, 2018) licensed under CC BY SA by ilustat."
  },
  {
    "objectID": "r-basics.html#preface",
    "href": "r-basics.html#preface",
    "title": "R basics",
    "section": "Preface",
    "text": "Preface\nThis “Getting Started” guide will give you a flavor of what R can do for you. To get the most out of this guide, do the examples and exercises as you read along.\nExperiment safely. Be brave and experiment with commands and options as it is an essential part of the learning process. Things can and will go “wrong”, like getting error messages or deleting things that you create. You can recover from most situations using “undo” ctrl Z (MacOS cmd Z) or restarting R with the RStudio menu Session > Restart R.\nBefore starting. Our tutorials assume that you\n\nHave completed the Before you arrive instructions\n\nStart your R session by launching the RStudio project you created, e.g., midfield-institute-2022.Rproj"
  },
  {
    "objectID": "r-basics.html#introduction",
    "href": "r-basics.html#introduction",
    "title": "R basics",
    "section": "Introduction",
    "text": "Introduction\nStarting R & RStudio. R starts automatically when you open RStudio with a screen similar to Figure 1. The console starts with information about the version number, license and contributors. The last line is a prompt (>) that indicates R is ready to do something.\n\n\n\n\n\nFigure 1: RStudio screenshot with Console on the left and Help tab in the bottom right\n\n\n\n\nQuitting R & RStudio. When you quit RStudio you will be asked whether to Save workspace? with a yes or no option. If you choose Yes, your current workspace is restored the next time you open RStudio. But as long as you save your script, saving the workspace is unnecessary. We recommend you choose No.\nTo set No as the default option, from the RStudio menu select Tools > Global Options.\n\nUn-check the box Restore .RData into workspace at startup\nSet Save workspace to .RData on exit: to “Never”\n\n\n\n\n\n\nFigure 2: RStudio global options default settings."
  },
  {
    "objectID": "r-basics.html#r-help",
    "href": "r-basics.html#r-help",
    "title": "R basics",
    "section": "R help",
    "text": "R help\nR’s built-in help system is an essential part of finding solutions to your R programming problems.\nhelp() function. From the R Console you can use the help() function or ?. For example, try the following two commands (which give the same result):\n# view the function help page\nhelp(mean)\n? mean\nKeyword search. To do a keyword search use the function apropos() with the keyword in double quotes (“keyword”) or single quote (‘keyword’). For example:\n\n# keyword search \napropos(\"mean\")\n#>  [1] \".colMeans\"     \".rowMeans\"     \"colMeans\"      \"kmeans\"       \n#>  [5] \"mean\"          \"mean.Date\"     \"mean.default\"  \"mean.difftime\"\n#>  [9] \"mean.POSIXct\"  \"mean.POSIXlt\"  \"rowMeans\"      \"weighted.mean\"\n\nHelp examples. Use the example() function to run the examples at the end of the help for a function:\n\n# run the examples at the end of the help page\nexample(mean)\n#> \n#> mean> x <- c(0:10, 50)\n#> \n#> mean> xm <- mean(x)\n#> \n#> mean> c(xm, mean(x, trim = 0.10))\n#> [1] 8.75 5.50\n\nRStudio help. Rstudio provides search box in the Help tab to make your life easier (see Figure 1).\nOnline help. When you search online use [R] in your search terms, for example, “[r] linear regression”.\nThere is nearly always more than one solution to your problem—investigate the different options and try to use one whose arguments and logic you can follow.\n\nYour turnAnswer\n\n\nTry the following.\n\nhelp(median)\n? sd\n? max\n\n\n\nThe following help pages should appear in the RStudio Help pane.\n\n\n\n\n\n\nWarning. If an R command is not complete then R will show a plus sign (+) prompt on second and subsequent lines until the command syntax is correct.\n+ \nPress the escape key (ESC) to break out.\nHint. To recall a previous command, put your cursor in the Console and use the up arrow key (↑). To go between previously typed commands use the up and down arrow (↓) keys. To modify or correct a command use the left (←) and right arrow (→) keys."
  },
  {
    "objectID": "r-basics.html#r-scripts",
    "href": "r-basics.html#r-scripts",
    "title": "R basics",
    "section": "R scripts",
    "text": "R scripts\nWe recommend that you write your lines of code in a script. Scripts can saved, edited, and run again and again.\n\nUse File > New File > R Script to create a new R script\nFile > Save As… to name the file (we suggest 01-R-basics.R), then save it to the scripts directory\nAt the top of the script, add a minimal header, something like:\n\n\n# R basics tutorial\n# R. Layton \n# 2022-06-07 \n\nThe hash symbol # denotes a comment in R, that is, a line that isn’t run. Comments are annotations to make the source code easier for humans to understand but are ignored by R.\nIn code chunks like the one above you should see a “Copy to clipboard” icon in the upper right corner. Clicking on the icon copies the code chunk to your clipboard and you can paste it into your R script and edit as needed.\nNext,\n\nUse library() to load packages used in the script.\n\n\n# packages\nlibrary(\"midfieldr\")\n\nRun the script by clicking the Source button. Alternatively, you can use the keyboard shortcuts ctrl A (MacOS cmd A) to select all lines then ctrl Enter (MacOS cmd Return) to run all lines. (See the appendices for a table of useful keyboard shortcuts.)\nIf you see an error like this one,\n    Error in library(\"ggplot2\"): there is no package called 'ggplot2'\nthen you should install the missing package(s) and run the script again. You can review how to install a package here.\nUse your script throughout the tutorial. When a new chunk of code is given,\n\nCopy the line(s) of code into your script, save, and run.\n\nCheck your result by comparing it to the result in the tutorial.\nCheck what you’ve learned using the Your turn exercises."
  },
  {
    "objectID": "r-basics.html#r-concepts-1",
    "href": "r-basics.html#r-concepts-1",
    "title": "R basics",
    "section": "R concepts 1",
    "text": "R concepts 1\nIn R speak, scalars, vectors, variables and datasets are called objects. To create objects (things) we use the assignment operator (<-).\nFor example, the object height is assigned a value of 173 as follows,\n\n# assign a value to a named object \nheight <- 173\n\nTyping the name alone prints out its value,\n\n# view\nheight\n#> [1] 173\n\nIn these notes, everything that comes back to us in the Console as the result of running a script is shown prefaced by #>.\nWarning: R is case sensitive. age and AgE are different:\n\n# illustrating case-sensitivity \nage <- 10\nAgE <- 50\n\n\n# display result\nage\n#> [1] 10\nAgE\n#> [1] 50\n\nNew lines. R commands are usually separated by a new line but they can also be separated by a semicolon (not recommended).\n\n# recommended style\nname <- \"Leo\"\nage  <- 25\ncity <- \"Lisbon\"\n\n# views\nname\n#> [1] \"Leo\"\nage\n#> [1] 25\ncity\n#> [1] \"Lisbon\"\n\n# style not recommended \nname <- \"Leo\"; age <- 25; city <- \"Lisbon\"\n\n# view\nname; age; city\n#> [1] \"Leo\"\n#> [1] 25\n#> [1] \"Lisbon\"\n\nComments. It is useful to put comments in your script—especially useful to the future you looking back at your script after several months.\nR comments start with a hash sign (#). Everything after the hash to the end of the line is ignored by R.\n\n# This comment line is ignored when run.\n\ncity # text after \"#\" is ignored.\n#> [1] \"Lisbon\""
  },
  {
    "objectID": "r-basics.html#r-as-a-calculator",
    "href": "r-basics.html#r-as-a-calculator",
    "title": "R basics",
    "section": "R as a calculator",
    "text": "R as a calculator\nYou can use R as a calculator by typing in the Console. Try the following:\n\n# type in the console\n2 + 3\n#> [1] 5\n\n(5 * 11) / 4 - 7\n#> [1] 6.75\n\n7^3 # exponent\n#> [1] 343\n\nOther math functions. You can also use standard mathematical functions that are typically found on a scientific calculator.\n\ntrigonometric: sin(), cos(), tan(), etc.\nrounding: abs(), ceiling(), floor(), round(), sign(), signif(), trunc()\nlogarithms and exponentials: log(), log10(), log2(), exp()\n\n\n# type in the console\n\n# square root\nsqrt(2)\n#> [1] 1.414214\n\n# round down to nearest integer\nfloor(8.6178)\n#> [1] 8\n\n# round to 2 decimal places\nround(8.6178, 2)\n#> [1] 8.62\n\n\nYour turnAnswer\n\n\nWhat do the following pairs of examples do?\n\nceiling(18.33) and signif(9488, 2)\nexp(1) and log10(1000)\nsign(-2.9) and sign(32)\nabs(-27.9) andabs(11.9)`\n\n\n\n\n19 and 9500\n2.718282 and 3\n-1 and +1\n27.9 and 11.9"
  },
  {
    "objectID": "r-basics.html#r-concepts-2",
    "href": "r-basics.html#r-concepts-2",
    "title": "R basics",
    "section": "R concepts 2",
    "text": "R concepts 2\nFrom this point, please type the R code chunks in your script, save and run, and compare your results to those shown.\nYou can do some useful things using the assignment operator (<-), for example,\n\n# assign dimensions\nroom_length <- 7.8\nroom_width  <- 6.4\n\n# compute area\nroom_area <- room_length * room_width\n\n# view\nroom_area\n#> [1] 49.92\n\nOn coding style. we name R objects using so-called “snake-case”, that is, lowercase letters and numbers with underscores. You may of course use any style you are comfortable with.\nText objects. You can assign text to an object.\n\n# assign text to an object\ngreeting <- \"Hello world!\"\n\n# view\ngreeting\n#> [1] \"Hello world!\"\n\nVectors. The objects presented so far have been scalars (single values). Working with vectors is where R shines best as they are the basic building blocks of datasets.\nWe can create a vector using the c() (combine values into a vector) function.\n\n# a numeric vector\nx1 <- c(26, 10, 4, 7, 41, 19)\n\n# view\nx1\n#> [1] 26 10  4  7 41 19\n\n# a character vector\nx2 <- c(\"Peru\", \"Italy\", \"Cuba\", \"Ghana\")\n\n# view\nx2\n#> [1] \"Peru\"  \"Italy\" \"Cuba\"  \"Ghana\"\n\nThere are many other ways to create vectors, for example, rep() (replicate elements) and seq() (create sequences):\n\n# repeat vector (2, 6, 7, 4) three times\nr1 <- rep(c(2, 6, 7, 4), times = 3)\n\n# view\nr1\n#>  [1] 2 6 7 4 2 6 7 4 2 6 7 4\n\n\n# vector from -2 to 3 incremented by 0.5\ns1 <- seq(from = -2, to = 3, by = 0.5)\n\n# view\ns1\n#>  [1] -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0  1.5  2.0  2.5  3.0\n\nVector operations. You can do calculations on vectors, for example using x1 from above:\n\n# multiply every element by 2\nx1 * 2\n#> [1] 52 20  8 14 82 38\n\n# operation order: product, root, then round\nround(sqrt(x1 * 2.6), 2)\n#> [1]  8.22  5.10  3.22  4.27 10.32  7.03\n\nMissing values. Missing values are coded as NA in R. For example,\n\n# numeric vector with a missing value\nx2 <- c(3, -7, NA, 5, 1, 1)\n\n# view\nx2\n#> [1]  3 -7 NA  5  1  1\n\n# character vector with a missing value\nx3 <- c(\"rat\", NA, \"mouse\", \"hamster\")\n\n# view\nx3\n#> [1] \"rat\"     NA        \"mouse\"   \"hamster\"\n\nManaging objects. Use function ls() to list the objects in your workspace. The rm() function deletes them.\n\n# view objects in workspace\nls()\n#>  [1] \"age\"         \"AgE\"         \"city\"        \"greeting\"    \"height\"     \n#>  [6] \"name\"        \"r1\"          \"room_area\"   \"room_length\" \"room_width\" \n#> [11] \"s1\"          \"x\"           \"x1\"          \"x2\"          \"x3\"         \n#> [16] \"xm\"\n\n# remove objects\nrm(x1, x2, x3, r1, s1, AgE, age)\n\n# view result\nls()\n#> [1] \"city\"        \"greeting\"    \"height\"      \"name\"        \"room_area\"  \n#> [6] \"room_length\" \"room_width\"  \"x\"           \"xm\"\n\n\nYour turnAnswer\n\n\nCalculate the gross by adding the tax to net amount and round to the nearest integer.\n\nnet <- c(108.99, 291.42, 16.28, 62.29, 31.77)\ntax <- c(22.89, 17.49, 0.98, 13.08, 6.67)\n\n\n\n\n#> [1] 132 309  17  75  38"
  },
  {
    "objectID": "r-basics.html#r-functions-and-packages",
    "href": "r-basics.html#r-functions-and-packages",
    "title": "R basics",
    "section": "R functions and packages",
    "text": "R functions and packages\nR functions. We have already used some R functions (e.g. c(), mean(), rep(), sqrt(), round()). Most computation in R involves functions.\nA function essentially has a name and a list of arguments separated by commas. For example:\n\n# closer look at function arguments\nseq(from = 5, to = 8, by = 0.4)\n#> [1] 5.0 5.4 5.8 6.2 6.6 7.0 7.4 7.8\n\n\nthe function name is seq\nthe function has three arguments from (the start value), to (the end value), and by (the increment between values)\n\nThe seq() function has other arguments, documented in the help page. For example, we could use the argument length.out (instead of by) to fix the length of the sequence as follows:\n\n# replacing `by` with `length.out` \nseq(from = 5, to = 8, length.out = 16)\n#>  [1] 5.0 5.2 5.4 5.6 5.8 6.0 6.2 6.4 6.6 6.8 7.0 7.2 7.4 7.6 7.8 8.0\n\nCustom functions. As you gain familiarity with R, you may want to learn how to construct your own custom functions, but that’s not an objective of our “basics” tutorials.\nR packages. The basic R installation comes with over 2000 functions, but R can be extended further using contributed packages. Packages are like “apps” for R, containing functions, data, and documentation.\nTo see a list of functions and data sets bundled in a package, use the ls() function, e,g,\n\nls(\"package:midfieldr\")\n#>  [1] \"add_completion_timely\" \"add_data_sufficiency\"  \"add_institution\"      \n#>  [4] \"add_race_sex\"          \"add_timely_term\"       \"cip\"                  \n#>  [7] \"condition_fye\"         \"condition_multiway\"    \"filter_match\"         \n#> [10] \"filter_search\"         \"fye_start\"             \"study_grad_rate\"      \n#> [13] \"study_program\"         \"study_stickiness\"      \"study_student\"        \n#> [16] \"toy_course\"            \"toy_degree\"            \"toy_student\"          \n#> [19] \"toy_term\"\n\nAlternatively, in RStudio select the Packages tab and in its menu bar type the package name in the search box. In the pane, click on the package name. A help page opens listing all the functions and names of data sets in the package, e.g.,\n\nIn this work, we use a small number of R packages:\n\nmidfieldr for tools to study student unit records\nmidfielddata for practice data\ndata.table for manipulating data\nggplot2 for charts"
  },
  {
    "objectID": "r-basics.html#keyboard-shortcuts",
    "href": "r-basics.html#keyboard-shortcuts",
    "title": "R basics",
    "section": "Keyboard shortcuts",
    "text": "Keyboard shortcuts\n\nIf you are working in RStudio, you can see the menu of keyboard shortcuts using the menu Tools > Keyboard Shortcuts Help.\nThe shortcuts we use regularly include\n\n\n\n\n\nWindows / Linux\nAction\nMac OS\n\n\n\n\nctrl shift K\nCompile R Markdown document\ncmd shift K\n\n\nctrl L\nClear the RStudio Console\nctrl L\n\n\nctrl shift C\nComment/uncomment line(s)\ncmd shift C\n\n\nctrl X, C, V\nCut, copy, paste\ncmd X, C, V\n\n\nctrl F\nFind in text\ncmd F\n\n\nctrl I\nIndent or re-indent lines od code\ncmd I\n\n\nalt –\nInsert the assignment operator <-\noption –\n\n\nctrl alt B\nRun from begining to line\ncmd option B\n\n\nctrl alt E\nRun from line to end\ncmd option E\n\n\nctrl Enter\nRun selected line(s)\ncmd Return\n\n\nctrl S\nSave\ncmd S\n\n\nctrl A\nSelect all text\ncmd A\n\n\nctrl Z\nUndo\ncmd Z"
  },
  {
    "objectID": "software.html",
    "href": "software.html",
    "title": "Install everything",
    "section": "",
    "text": "To get the most out of the workshop, you should have the essential software installed and running several days before the workshop to give you time to contact us with questions if anything goes amiss.\nIf you are trying R for the first time, it is vital that you attempt to set up your computer with the necessary software in advance or it will be difficult to keep up."
  },
  {
    "objectID": "software.html#already-installed",
    "href": "software.html#already-installed",
    "title": "Install everything",
    "section": "Already installed?",
    "text": "Already installed?\nIf you do not have R and RStudio installed, please skip this section and start with the next section.\nIf you are already an R and RStudio user, this is a great time to check for updates.\nUpdating RStudio\n\nRStudio menu Help > Check for Updates will tell you if you are current or not.\nTo update, close RStudio on your machine, download the new version from the RStudio website, and run the RStudio-some-version-number.exe. (Windows users might have to run the executable as an administrator.)\n\nUpdate your packages\nHow to upgrade all out-of-date packages in What They Forgot to Teach You About R by Jennifer Bryan and Jim Hester.\nUpdating R\nThe easiest way to update R is to simply download the newest version. RStudio will automatically use the latest you’ve installed.\nAlternatively, Windows users can use the installr package:\n\nInstall the installr package\nIf open, close R and RStudio\nNavigate to your most recent Rgui.exe file located in your Programs directory, e.g., C:\\Program Files\\R\\R-4.0.0\\bin\\x64\\Rgui.exe\n\nRight-click on Rgui.exe and run as administrator\nIn the R GUI window that appears, run the commands\n\n    # Windows users only\n    library(\"installr\")\n    updateR()\nUpdating your R library\nHow to transfer your library when updating R also by Bryan and Hester. Requires the fs package."
  },
  {
    "objectID": "software.html#install-r-and-rstudio",
    "href": "software.html#install-r-and-rstudio",
    "title": "Install everything",
    "section": "Install R and RStudio",
    "text": "Install R and RStudio\nThis section is for anyone who has not yet installed R or RStudio.\nThe first steps are to install R and RStudio. Windows users may have to login as an Administrator before installing the software.\n\nInstall R for your operating system\n\nInstall RStudio, a user interface for R\n\nOnce the installation is complete, you can take a 2-minute tour of the RStudio interface.\n\nLet’s start (00:57–02:32) by R Ladies Sydney (RLadiesSydney:2018:Lesson1?)\n\nThe same video includes a longer (7 minute) tour of the four quadrants (panes) in RStudio if you are interested.\n\nThe RStudio quadrants (07:21–14:40) by R Ladies Sydney (RLadiesSydney:2018:Lesson1?)"
  }
]